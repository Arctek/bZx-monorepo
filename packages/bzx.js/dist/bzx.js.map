{"version":3,"sources":["webpack://bzx.js/webpack/universalModuleDefinition","webpack://bzx.js/webpack/bootstrap","webpack://bzx.js/./src/contracts/index.js","webpack://bzx.js/./src/core/utils/index.js","webpack://bzx.js/external \"ramda\"","webpack://bzx.js/./src/addresses/index.js","webpack://bzx.js/./src/core/constants/index.js","webpack://bzx.js/external \"@0x/assert\"","webpack://bzx.js/./src/signature/index.js","webpack://bzx.js/external \"ethereumjs-util\"","webpack://bzx.js/./src/orderHistory/utils/index.js","webpack://bzx.js/external \"bignumber.js\"","webpack://bzx.js/./src/schemas/bZx_json_schemas.js","webpack://bzx.js/external \"lodash\"","webpack://bzx.js/external \"bn.js\"","webpack://bzx.js/external \"web3-utils\"","webpack://bzx.js/./src/core/index.js","webpack://bzx.js/external \"jsonschema\"","webpack://bzx.js/external \"@0x/json-schemas/lib/schemas/number_schema.json\"","webpack://bzx.js/external \"@0x/json-schemas/lib/schemas/address_schema.json\"","webpack://bzx.js/external \"@0x/json-schemas/lib/schemas/ec_signature_schema.json\"","webpack://bzx.js/external \"@0x/json-schemas/lib/schemas/ec_signature_parameter_schema.json\"","webpack://bzx.js/external \"@0x/json-schemas/lib/schemas/hex_schema.json\"","webpack://bzx.js/./src/schemas/bZx_order_schemas.js","webpack://bzx.js/external \"@0x/utils\"","webpack://bzx.js/./src/contracts/merged/index.js","webpack://bzx.js/./src/oracles/index.js","webpack://bzx.js/./src/fill/index.js","webpack://bzx.js/external \"eth-sig-util\"","webpack://bzx.js/./src/signature/utils/index.js","webpack://bzx.js/./src/orderHistory/index.js","webpack://bzx.js/./src/orderHistory/loans.js","webpack://bzx.js/./src/orderHistory/utils/loanPositions.js","webpack://bzx.js/./src/orderHistory/utils/orders.js","webpack://bzx.js/./src/core/constants/errors.js","webpack://bzx.js/./src/trade/index.js","webpack://bzx.js/external \"ethereumjs-abi\"","webpack://bzx.js/external \"@0x/order-utils\"","webpack://bzx.js/./src/trade/utils/zeroEx.js","webpack://bzx.js/./src/loanHealth/index.js","webpack://bzx.js/./src/bounty/index.js","webpack://bzx.js/./src/bounty/utils/activeLoans.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_merged","networksRaw","local","merged","mainnet","ropsten","kovan","rinkeby","getContracts","networkId","tokenList","undefined","oracleList","_utils","_assert","_bn","Web3Utils","constants","_bZx_json_schemas","_contracts","Addresses","noop","bigNumberToBN","BN","toString","getLoanOrderHashArgs","generatePseudoRandomSalt","randomNumber","BigNumber","random","MAX_DIGITS_IN_UNSIGNED_256_INT","factor","pow","times","integerValue","ROUND_CEIL","order","shouldFormatAsStrings","orderAddresses","makerAddress","loanTokenAddress","interestTokenAddress","collateralTokenAddress","feeRecipientAddress","oracleAddress","takerAddress","tradeTokenToFillAddress","orderValues","loanTokenAmount","interestAmount","initialMarginAmount","maintenanceMarginAmount","lenderRelayFee","traderRelayFee","maxDurationUnixTimestampSec","expirationUnixTimestampSec","makerRole","withdrawOnOpen","salt","getOrderValues","oracleData","doesContractExistAtAddress","_ref","_asyncToGenerator","web3","address","code","eth","getCode","test","_x","_x2","apply","arguments","getContractInstance","abi","assert","isETHAddressHex","Contract","getLoanOrderHashHex","soliditySha3","v","bZxAddress","getLoanOrderHashAsync","_ref2","BZx","getAddresses","methods","getLoanOrderHash","_x3","_x4","doesConformToSchema","variableName","schema","validationResult","SchemaValidator","validate","hasValidationErrors","errors","length","msg","id","JSON","stringify","join","toChecksumAddress","addr","requestFaucetToken","tokenAddress","receiverAddress","getObject","txOpts","txObj","TestNetFaucet","faucet","console","log","encodeABI","send","getWeb3Contract","contractName","contractAddress","require","_ramda","pipe","raw","map","contract","addresses","toLowerCase","_bignumber","SOLIDITY_TYPE_MAX_CHARS","NULL_ADDRESS","UNLIMITED_ALLOWANCE_IN_BASE_UNITS","minus","ethUtil","signatureUtils","CoreUtils","SignatureTypeStr","freeze","Illegal","Invalid","EIP712","EthSign","Caller","Wallet","Validator","PreSigned","Trezor","signOrderHashAsync","orderHash","signerAddress","shouldAddPersonalMessagePrefix","isHexString","nodeVersion","version","node","isParityNode","_","includes","isTestRpc","signature","sign","msgHashHex","orderHashBuff","toBuffer","msgHashBuff","hashPersonalMessage","bufferToHex","validVParamValues","ecSignatureVRS","parseSignatureHexAsVRS","isValidSignature","toRpcSig","ecSignatureRSV","parseSignatureHexAsRSV","Error","account","substr","sigUtil","recoverPersonalSignature","data","sig","isValidSignatureAsync","bZxContract","_x5","_x6","_constants","remove0xPrefix","makeCheckProperObjCount","numFields","makeGetOrderObjArray","match","RegExp","getOrderParams","prepend0x","arg","substr24","parseIntHex","parseInt","jsonschema_1","ValidatorResult","number_schema_1","address_schema_1","ec_signature_schema_1","ec_signature_parameter_schema_1","hex_schema_1","order_schemas_1","schemas","numberSchema","addressSchema","ecSignatureSchema","ecSignatureParameterSchema","hexSchema","loanOrderSchema","signedLoanOrderSchema","validator","_i","_a","values","addSchema","instance","jsonSchemaCompatibleObject","parse","isValid","utils","oracles","fill","orderHistory","Errors","trade","loanHealth","bounty","BZxJS","constructor","_ref3","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_this","props","getOracleList","takeLoanOrderAsLender","takeLoanOrderAsTrader","getInitialCollateralRequired","getSingleOrder","getOrdersForUser","getSingleLoan","getLoansForLender","getLoansForTrader","tradePositionWith0xV2","tradePositionWithOracle","depositCollateral","withdrawCollateral","changeCollateral","withdrawPosition","depositPosition","getPositionOffset","closeLoan","getLenderInterestForOrder","getTraderInterestForLoan","payInterestForOrder","getMarginLevels","liquidateLoan","NoNetworkId","networkName","etherscanURL","[object Object]","properties","$ref","required","type","allOf","ecSignature","BZxOracle","BZxTo0x","BZxToken","BZRxTokenConvert","BZxVault","EIP20","OracleRegistry","TokenRegistry","ZRXToken","WETH","OracleInterface","LoanToken","PositionToken","TokenizedRegistry","getOracleListRaw","oracleRegistryContract","res","oracleAddresses","oracleNameLengths","oracleNamesAllConcat","cleanOracleNames","convertStrToNum","str","Number","getNames","indicies","substring","lengths","accum","indiciesPairs","mapAccum","acc","val","formatOracleList","oracleNames","zipWith","isTradeSupported","sourceTokenAddress","destTokenAddress","sourceTokenAmount","oracleContract","queriesP","Promise","all","isSupportedForward","isSupportedReverse","getConversionData","_ref4","getTradeData","rate","precision","amount","_x7","_x8","_x9","Signature","Constants","checkForValidSignature","loanTokenAmountFilled","toBN","pushLoanOrderOnChain","takeLoanOrderOnChainAsTrader","loanOrderHash","takeLoanOrderOnChainAsLender","cancelLoanOrder","cancelLoanTokenAmount","cancelLoanOrderWithHash","initialCollateralRequired","e","orderFilledAmount","filledAmount","orderFilledAmounts","orderCancelledAmount","cancelledAmount","orderCancelledAmounts","_x10","dataBuff","pubKey","ecrecover","pubToAddress","err","signatureHex","signatureBuffer","slice","fromRpcSig","keys","_loans","forEach","OrderUtils","cleanedData","cleanData","getOrdersFillable","start","count","oracleFilter","isAddress","loanPartyAddress","LoanPosUtils","trader","activeOnly","Utils","getLoanPosition","params","lender","collateralTokenAddressFilled","positionTokenAddressFilled","collateralTokenAmountFilled","positionTokenAmountFilled","loanStartUnixTimestampSec","loanEndUnixTimestampSec","active","interestPaidTotal","interestDepositRemaining","checkProperObjCount","getOrderObjArray","getOrder","orderTraderCount","addedUnixTimestampSec","ContractDoesNotExist","InvalidSignature","ZeroExTradeUtils","makeBN","padLeft","tradePositionWith0x","order0x","orderHashBZx","rpcSig0x","signedOrder","transformedOrder0x","transform0xOrder","orderHash0x","getOrderHashHex","maker","contracts","taker","makerTokenAddress","takerTokenAddress","feeRecipient","makerTokenAmount","takerTokenAmount","makerFee","takerFee","types","repeat","hashBuff","ethABI","solidityPack","order0xTightlyPacked","preppedOrders","sigs","Array","isArray","push","senderAddress","makerAssetAmount","takerAssetAmount","expirationTimeSeconds","makerAssetData","takerAssetData","tradeTokenAddress","exchangeContractAddress","depositTokenAddress","depositAmount","withdrawAmount","collateralTokenFilled","isPositive","positionOffsetAmount","loanOffsetAmount","collateralOffsetAmount","payInterestForOracle","getLenderInterestForOracle","getLenderInterestForToken","interestPaid","interestPaidDate","interestOwedPerDay","interestUnPaid","interestDepositTotal","closeLoanPartially","closeAmount","ActiveLoansUtils","getActiveLoans","currentMarginAmount","liquidateAmount","liquidatePosition","OrderHistoryUtils","getLoan"],"mappings":"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","file":"bzx.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"bzx.js\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bzx.js\"] = factory();\n\telse\n\t\troot[\"bzx.js\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","import { map } from \"ramda\";\r\nimport merged from \"./merged\";\r\n\r\nconst networksRaw = {\r\n  local: merged,\r\n  mainnet: merged,\r\n  ropsten: merged,\r\n  kovan: merged,\r\n  rinkeby: merged\r\n};\r\n\r\nexport const { local, mainnet, ropsten, kovan, rinkeby } = networksRaw;\r\n\r\nconst networksById = {\r\n  1: mainnet,\r\n  3: ropsten,\r\n  4: rinkeby,\r\n  42: kovan\r\n};\r\n\r\n\r\nexport const getContracts = (networkId = null) => merged;\r\n\r\nexport const tokenList = (networkId = null) => undefined;\r\n\r\nexport const oracleList = (networkId = null) => undefined;\r\n","import { BigNumber } from \"@0x/utils\";\r\nimport { assert } from \"@0x/assert\";\r\nimport BN from \"bn.js\";\r\nimport * as Web3Utils from \"web3-utils\";\r\nimport * as constants from \"../constants\";\r\nimport { SchemaValidator } from \"../../schemas/bZx_json_schemas\";\r\nimport { getContracts } from \"../../contracts\";\r\nimport * as Addresses from \"../../addresses\";\r\n\r\nexport const noop = () => {};\r\n\r\nexport const bigNumberToBN = value => new BN(value.toString(), 10);\r\n\r\nexport const generatePseudoRandomSalt = () => {\r\n  // BigNumber.random returns a pseudo-random number between 0 & 1\r\n  // with a passed in number of decimal places.\r\n  // Source: https://mikemcl.github.io/bignumber.js/#random\r\n  const randomNumber = BigNumber.random(\r\n    constants.MAX_DIGITS_IN_UNSIGNED_256_INT\r\n  );\r\n  const factor = new BigNumber(10).pow(\r\n    constants.MAX_DIGITS_IN_UNSIGNED_256_INT - 1\r\n  );\r\n  const salt = randomNumber.times(factor).integerValue(BigNumber.ROUND_CEIL);\r\n  return salt;\r\n};\r\n\r\nconst getOrderValues = (order, shouldFormatAsStrings) => {\r\n  // Must be strings in production for Web3Utils.soliditySha3 for some reason\r\n  if (shouldFormatAsStrings) {\r\n    return [\r\n      order.loanTokenAmount.toString(),\r\n      order.interestAmount.toString(),\r\n      order.initialMarginAmount.toString(),\r\n      order.maintenanceMarginAmount.toString(),\r\n      order.lenderRelayFee.toString(),\r\n      order.traderRelayFee.toString(),\r\n      order.maxDurationUnixTimestampSec.toString(),\r\n      order.expirationUnixTimestampSec.toString(),\r\n      order.makerRole.toString(),\r\n      order.withdrawOnOpen.toString(),\r\n      order.salt.toString()\r\n    ];\r\n  }\r\n  return [\r\n    bigNumberToBN(order.loanTokenAmount),\r\n    bigNumberToBN(order.interestAmount),\r\n    bigNumberToBN(order.initialMarginAmount),\r\n    bigNumberToBN(order.maintenanceMarginAmount),\r\n    bigNumberToBN(order.lenderRelayFee),\r\n    bigNumberToBN(order.traderRelayFee),\r\n    bigNumberToBN(order.maxDurationUnixTimestampSec),\r\n    bigNumberToBN(order.expirationUnixTimestampSec),\r\n    bigNumberToBN(order.makerRole),\r\n    bigNumberToBN(order.withdrawOnOpen),\r\n    bigNumberToBN(order.salt)\r\n  ];\r\n};\r\n\r\nconst getLoanOrderHashArgs = (order, shouldFormatAsStrings) => {\r\n  const orderAddresses = [\r\n    order.makerAddress,\r\n    order.loanTokenAddress,\r\n    order.interestTokenAddress,\r\n    order.collateralTokenAddress,\r\n    order.feeRecipientAddress,\r\n    order.oracleAddress,\r\n    order.takerAddress,\r\n    order.tradeTokenToFillAddress\r\n  ];\r\n  const orderValues = getOrderValues(order, shouldFormatAsStrings);\r\n  const oracleData = order.oracleData || \"0x\";\r\n\r\n  return { orderAddresses, orderValues, oracleData };\r\n};\r\n\r\nexport const doesContractExistAtAddress = async (web3, address) => {\r\n  const code = await web3.eth.getCode(address);\r\n  // Regex matches 0x0, 0x00, 0x in order to accommodate poorly implemented clients\r\n  const codeIsEmpty = /^0x0{0,40}$/i.test(code);\r\n  return !codeIsEmpty;\r\n};\r\n\r\nexport const getContractInstance = (web3, abi, address) => {\r\n  assert.isETHAddressHex(\"address\", address);\r\n  const contract = new web3.eth.Contract(abi, address);\r\n  return contract;\r\n};\r\n\r\nexport const getLoanOrderHashHex = order => {\r\n  const { orderAddresses, orderValues, oracleData } = getLoanOrderHashArgs(order, true);\r\n  const orderHashHex = Web3Utils.soliditySha3(\r\n    { t: \"address\", v: order.bZxAddress },\r\n    { t: \"address[8]\", v: orderAddresses },\r\n    { t: \"uint256[11]\", v: orderValues },\r\n    { t: \"bytes\", v: oracleData }\r\n  );\r\n  return orderHashHex;\r\n};\r\n\r\nexport const getLoanOrderHashAsync = async ({ web3, networkId }, order) => {\r\n  const { orderAddresses, orderValues, oracleData } = getLoanOrderHashArgs(order, true);\r\n  const bZxContract = await getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n  return bZxContract.methods\r\n    .getLoanOrderHash(\r\n      orderAddresses,\r\n      orderValues,\r\n      oracleData\r\n    )\r\n    .call();\r\n};\r\n\r\nexport const doesConformToSchema = (variableName, value, schema) => {\r\n  const schemaValidator = new SchemaValidator();\r\n  const validationResult = schemaValidator.validate(value, schema);\r\n  const hasValidationErrors = validationResult.errors.length > 0;\r\n  const msg = `Expected ${variableName} to conform to schema ${\r\n    schema.id\r\n  }\\nEncountered: ${JSON.stringify(\r\n    value,\r\n    null,\r\n    \"\\t\"\r\n  )}\\nValidation errors: ${validationResult.errors.join(\", \")}`;\r\n  assert.assert(!hasValidationErrors, msg);\r\n};\r\n\r\nexport const toChecksumAddress = addr => Web3Utils.toChecksumAddress(addr);\r\n\r\nexport const requestFaucetToken = (\r\n  { web3, networkId },\r\n  { tokenAddress, receiverAddress, getObject, txOpts }\r\n) => {\r\n  const faucetContract = getContractInstance(\r\n    web3,\r\n    getContracts(networkId).TestNetFaucet.abi,\r\n    Addresses.getAddresses(networkId).TestNetFaucet\r\n  );\r\n\r\n  const txObj = faucetContract.methods.faucet(\r\n    toChecksumAddress(tokenAddress),\r\n    toChecksumAddress(receiverAddress)\r\n  );\r\n  console.log(`requestFaucetToken: ${txObj.encodeABI()}`);\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const getWeb3Contract = ({ web3, networkId }, contractName, contractAddress) => getContractInstance(\r\n    web3,\r\n    getContracts(networkId)[contractName].abi,\r\n    contractAddress ? contractAddress : Addresses.getAddresses(networkId)[contractName]\r\n  );\r\n","module.exports = require(\"ramda\");","import { map, pipe } from \"ramda\";\r\nimport { getContracts } from \"../contracts\";\r\n\r\nexport const getAddresses = networkId =>\r\n  pipe(\r\n    getContracts,\r\n    (raw) => pipe(\r\n        map(contract => contract.addresses[networkId]),\r\n        map(address => address ? address.toLowerCase() : \"\")\r\n    )(raw)\r\n  )(networkId);\r\n","import { BigNumber } from \"bignumber.js\";\r\n\r\nexport const SOLIDITY_TYPE_MAX_CHARS = 64;\r\nexport const NULL_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\nexport const UNLIMITED_ALLOWANCE_IN_BASE_UNITS = new BigNumber(2)\r\n  .pow(256)\r\n  .minus(1);\r\nexport const MAX_DIGITS_IN_UNSIGNED_256_INT = 78;\r\n","module.exports = require(\"@0x/assert\");","import sigUtil from \"eth-sig-util\";\r\nimport * as ethUtil from \"ethereumjs-util\";\r\nimport { assert } from \"@0x/assert\";\r\nimport _ from \"lodash\";\r\nimport * as signatureUtils from \"./utils\";\r\nimport * as CoreUtils from \"../core/utils\";\r\nimport { getContracts } from \"../contracts\";\r\nimport * as Addresses from \"../addresses\";\r\n\r\nconst SignatureTypeStr = Object.freeze({\r\n  Illegal: \"00\",\r\n  Invalid: \"01\",\r\n  EIP712: \"02\",\r\n  EthSign: \"03\",\r\n  Caller: \"04\",\r\n  Wallet: \"05\",\r\n  Validator: \"06\",\r\n  PreSigned: \"07\",\r\n  Trezor: \"08\"\r\n});\r\n\r\nexport const signOrderHashAsync = async (\r\n  { web3 },\r\n  orderHash,\r\n  signerAddress,\r\n  // Metamask provider needs shouldAddPersonalMessagePrefix to be true\r\n  shouldAddPersonalMessagePrefix\r\n) => {\r\n  assert.isHexString(\"orderHash\", orderHash);\r\n  assert.isETHAddressHex(\"signerAddress\", signerAddress);\r\n  const nodeVersion = web3.version.node;\r\n  const isParityNode = _.includes(nodeVersion, \"Parity\");\r\n  const isTestRpc = _.includes(nodeVersion, \"TestRPC\");\r\n  let signature = null;\r\n\r\n  if (isParityNode || isTestRpc) {\r\n    // Parity and TestRpc nodes add the personalMessage prefix itself\r\n    signature = await web3.eth.sign(orderHash, signerAddress);\r\n  } else {\r\n    let msgHashHex = orderHash;\r\n    if (shouldAddPersonalMessagePrefix) {\r\n      const orderHashBuff = ethUtil.toBuffer(orderHash);\r\n      const msgHashBuff = ethUtil.hashPersonalMessage(orderHashBuff);\r\n      msgHashHex = ethUtil.bufferToHex(msgHashBuff);\r\n    }\r\n    signature = await web3.eth.sign(msgHashHex, signerAddress);\r\n  }\r\n\r\n  // HACK: There is no consensus on whether the signatureHex string should be formatted as\r\n  // v + r + s OR r + s + v, and different clients (even different versions of the same client)\r\n  // return the signature params in different orders. In order to support all client implementations,\r\n  // we parse the signature in both ways, and evaluate if either one is a valid signature.\r\n  const validVParamValues = [27, 28];\r\n  const ecSignatureVRS = signatureUtils.parseSignatureHexAsVRS(signature);\r\n  if (_.includes(validVParamValues, ecSignatureVRS.v)) {\r\n    const isValidVRSSignature = signatureUtils.isValidSignature(\r\n      orderHash,\r\n      ecSignatureVRS,\r\n      signerAddress\r\n    );\r\n    if (isValidVRSSignature) {\r\n      return (\r\n        ethUtil.toRpcSig(ecSignatureVRS.v, ecSignatureVRS.r, ecSignatureVRS.s) +\r\n        SignatureTypeStr.EthSign\r\n      );\r\n    }\r\n  }\r\n\r\n  const ecSignatureRSV = signatureUtils.parseSignatureHexAsRSV(signature);\r\n  if (_.includes(validVParamValues, ecSignatureRSV.v)) {\r\n    const isValidRSVSignature = signatureUtils.isValidSignature(\r\n      orderHash,\r\n      ecSignatureRSV,\r\n      signerAddress\r\n    );\r\n    if (isValidRSVSignature) {\r\n      return (\r\n        ethUtil.toRpcSig(ecSignatureRSV.v, ecSignatureRSV.r, ecSignatureRSV.s) +\r\n        SignatureTypeStr.EthSign\r\n      );\r\n    }\r\n  }\r\n\r\n  throw new Error(\"InvalidSignature\");\r\n};\r\n\r\nexport const isValidSignature = ({ account, orderHash, signature }) => {\r\n  // hack to support 0x v2 EthSign SignatureType format\r\n  // recoverPersonalSignature assumes no SignatureType ending\r\n  signature = signature.substr(0, 132); // eslint-disable-line no-param-reassign\r\n\r\n  const recoveredAccount = sigUtil.recoverPersonalSignature({\r\n    data: orderHash,\r\n    sig: signature\r\n  });\r\n  return recoveredAccount === account;\r\n};\r\n\r\nexport const isValidSignatureAsync = async (\r\n  { web3, networkId },\r\n  { account, orderHash, signature }\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  // hack to support 0x v2 EthSign SignatureType format\r\n  // bZx requires SignatureType ending\r\n  signature = signature.substr(0, 132) + SignatureTypeStr.EthSign; // eslint-disable-line no-param-reassign\r\n\r\n  return bZxContract.methods\r\n    .isValidSignature(account, orderHash, signature)\r\n    .call();\r\n};\r\n","module.exports = require(\"ethereumjs-util\");","import { SOLIDITY_TYPE_MAX_CHARS } from \"../../core/constants\";\r\n\r\nexport const remove0xPrefix = data => (data ? data.substr(2) : \"\");\r\n\r\nexport const makeCheckProperObjCount = numFields => data => {\r\n  const objCount = data.length / SOLIDITY_TYPE_MAX_CHARS / numFields;\r\n  if (objCount % 1 !== 0)\r\n    throw new Error(\"Data length invalid, must be whole number of objects\");\r\n  return data;\r\n};\r\n\r\nexport const makeGetOrderObjArray = numFields => data =>\r\n  data.match(new RegExp(`.{1,${numFields * SOLIDITY_TYPE_MAX_CHARS}}`, \"g\"));\r\n\r\nexport const getOrderParams = data =>\r\n  data.match(new RegExp(`.{1,${SOLIDITY_TYPE_MAX_CHARS}}`, \"g\"));\r\n\r\nconst HEX_RADIX = 16;\r\nexport const prepend0x = arg => `0x${arg}`;\r\nexport const substr24 = arg => arg.substr(24);\r\nexport const parseIntHex = arg => parseInt(arg, HEX_RADIX);\r\n","module.exports = require(\"bignumber.js\");","/* eslint-disable camelcase, no-underscore-dangle */\r\nconst jsonschema_1 = require(\"jsonschema\");\r\nconst _ = require(\"lodash\");\r\n\r\nexports.ValidatorResult = jsonschema_1.ValidatorResult;\r\n\r\nconst number_schema_1 = require(\"@0x/json-schemas/lib/schemas/number_schema.json\");\r\nconst address_schema_1 = require(\"@0x/json-schemas/lib/schemas/address_schema.json\");\r\nconst ec_signature_schema_1 = require(\"@0x/json-schemas/lib/schemas/ec_signature_schema.json\");\r\nconst ec_signature_parameter_schema_1 = require(\"@0x/json-schemas/lib/schemas/ec_signature_parameter_schema.json\");\r\nconst hex_schema_1 = require(\"@0x/json-schemas/lib/schemas/hex_schema.json\");\r\n\r\nconst order_schemas_1 = require(\"./bZx_order_schemas.js\");\r\n\r\nexports.schemas = {\r\n  numberSchema: number_schema_1,\r\n  addressSchema: address_schema_1,\r\n  ecSignatureSchema: ec_signature_schema_1,\r\n  ecSignatureParameterSchema: ec_signature_parameter_schema_1,\r\n  hexSchema: hex_schema_1,\r\n  loanOrderSchema: order_schemas_1.loanOrderSchema,\r\n  signedLoanOrderSchema: order_schemas_1.signedLoanOrderSchema\r\n};\r\n\r\nconst SchemaValidator = (function() {\r\n  // eslint-disable-next-line no-shadow\r\n  function SchemaValidator() {\r\n    this.validator = new jsonschema_1.Validator();\r\n    // eslint-disable-next-line no-plusplus\r\n    for (let _i = 0, _a = _.values(exports.schemas); _i < _a.length; _i++) {\r\n      const schema = _a[_i];\r\n      this.validator.addSchema(schema, schema.id);\r\n    }\r\n  }\r\n  SchemaValidator.prototype.addSchema = function(schema) {\r\n    this.validator.addSchema(schema, schema.id);\r\n  };\r\n  // In order to validate a complex JS object using jsonschema, we must replace any complex\r\n  // sub-types (e.g BigNumber) with a simpler string representation. Since BigNumber and other\r\n  // complex types implement the `toString` method, we can stringify the object and\r\n  // then parse it. The resultant object can then be checked using jsonschema.\r\n  SchemaValidator.prototype.validate = function(instance, schema) {\r\n    const jsonSchemaCompatibleObject = JSON.parse(JSON.stringify(instance));\r\n    return this.validator.validate(jsonSchemaCompatibleObject, schema);\r\n  };\r\n  SchemaValidator.prototype.isValid = function(instance, schema) {\r\n    const isValid = this.validate(instance, schema).errors.length === 0;\r\n    return isValid;\r\n  };\r\n  return SchemaValidator;\r\n})();\r\nexports.SchemaValidator = SchemaValidator;\r\n","module.exports = require(\"lodash\");","module.exports = require(\"bn.js\");","module.exports = require(\"web3-utils\");","import * as constants from \"./constants\";\r\nimport { schemas } from \"../schemas/bZx_json_schemas\";\r\nimport * as utils from \"./utils\";\r\nimport * as oracles from \"../oracles\";\r\nimport * as fill from \"../fill\";\r\nimport * as Addresses from \"../addresses\";\r\nimport * as orderHistory from \"../orderHistory\";\r\nimport * as signature from \"../signature\";\r\nimport * as Errors from \"./constants/errors\";\r\nimport * as trade from \"../trade\";\r\nimport * as loanHealth from \"../loanHealth\";\r\nimport * as bounty from \"../bounty\";\r\n\r\nexport class BZxJS {\r\n  static generatePseudoRandomSalt = utils.generatePseudoRandomSalt;\r\n  static noop = utils.noop;\r\n  static toChecksumAddress = utils.toChecksumAddress;\r\n\r\n  /* On Metamask, provider.host is undefined\r\n  Force users to provide host url */\r\n  constructor(web3, { networkId, addresses = Addresses.getAddresses(networkId) } = {}) {\r\n    if (!networkId) throw new Error(Errors.NoNetworkId);\r\n\r\n    this.web3 = web3;\r\n    this.addresses = addresses;\r\n    this.networkId = networkId;\r\n    switch (networkId) {\r\n      case 1:\r\n        this.networkName = \"mainnet\";\r\n        this.etherscanURL = \"https://etherscan.io/\";\r\n        break;\r\n      case 3:\r\n        this.networkName = \"ropsten\";\r\n        this.etherscanURL = \"https://ropsten.etherscan.io/\";\r\n        break;\r\n      case 4:\r\n        this.networkName = \"rinkeby\";\r\n        this.etherscanURL = \"https://rinkeby.etherscan.io/\";\r\n        break;\r\n      case 42:\r\n        this.networkName = \"kovan\";\r\n        this.etherscanURL = \"https://kovan.etherscan.io/\";\r\n        break;\r\n      default:\r\n        this.networkName = \"local\";\r\n        this.etherscanURL = \"\";\r\n        break;\r\n    }\r\n  }\r\n\r\n  static getLoanOrderHashHex(order) {\r\n    utils.doesConformToSchema(\"loanOrder\", order, schemas.loanOrderSchema);\r\n    const orderHashHex = utils.getLoanOrderHashHex(order);\r\n    return orderHashHex;\r\n  }\r\n  getLoanOrderHashAsync = async props =>\r\n    utils.getLoanOrderHashAsync(this, props);\r\n\r\n  static isValidSignature = props => signature.isValidSignature(props);\r\n\r\n  isValidSignatureAsync = async props =>\r\n    signature.isValidSignatureAsync(this, props);\r\n\r\n  signOrderHashAsync = async (...props) =>\r\n    signature.signOrderHashAsync(this, ...props);\r\n\r\n  getOracleList = async () => oracles.getOracleList(this);\r\n\r\n  takeLoanOrderAsLender = (...props) =>\r\n    fill.takeLoanOrderAsLender(this, ...props);\r\n\r\n  takeLoanOrderAsTrader = (...props) =>\r\n    fill.takeLoanOrderAsTrader(this, ...props);\r\n\r\n  getInitialCollateralRequired = async (...props) =>\r\n    fill.getInitialCollateralRequired(this, ...props);\r\n\r\n  getSingleOrder = async (...props) =>\r\n    orderHistory.getSingleOrder(this, ...props);\r\n  getOrdersForUser = async (...props) =>\r\n    orderHistory.getOrdersForUser(this, ...props);\r\n  getSingleLoan = async (...props) =>\r\n    orderHistory.getSingleLoan(this, ...props);\r\n  getLoansForLender = async (...props) =>\r\n    orderHistory.getLoansForLender(this, ...props);\r\n  getLoansForTrader = async (...props) =>\r\n    orderHistory.getLoansForTrader(this, ...props);\r\n\r\n  tradePositionWith0xV2 = (...props) => trade.tradePositionWith0xV2(this, ...props);\r\n  tradePositionWithOracle = (...props) =>\r\n    trade.tradePositionWithOracle(this, ...props);\r\n\r\n  depositCollateral = (...props) => loanHealth.depositCollateral(this, ...props);\r\n  withdrawCollateral = (...props) => loanHealth.withdrawCollateral(this, ...props);\r\n  changeCollateral = (...props) => loanHealth.changeCollateral(this, ...props);\r\n  withdrawPosition = (...props) => loanHealth.withdrawPosition(this, ...props);\r\n  depositPosition = (...props) => loanHealth.depositPosition(this, ...props);\r\n  getPositionOffset = (...props) => loanHealth.getPositionOffset(this, ...props);\r\n\r\n  closeLoan = (...props) => loanHealth.closeLoan(this, ...props);\r\n\r\n  getLenderInterestForOrder = (...props) => loanHealth.getLenderInterestForOrder(this, ...props);\r\n  getTraderInterestForLoan = (...props) => loanHealth.getTraderInterestForLoan(this, ...props);\r\n\r\n  payInterestForOrder = (...props) => loanHealth.payInterestForOrder(this, ...props);\r\n  getMarginLevels = (...props) => bounty.getMarginLevels(this, ...props);\r\n  liquidateLoan = (...props) => bounty.liquidateLoan(this, ...props);\r\n}\r\n\r\nexport default BZxJS;\r\n","module.exports = require(\"jsonschema\");","module.exports = require(\"@0x/json-schemas/lib/schemas/number_schema.json\");","module.exports = require(\"@0x/json-schemas/lib/schemas/address_schema.json\");","module.exports = require(\"@0x/json-schemas/lib/schemas/ec_signature_schema.json\");","module.exports = require(\"@0x/json-schemas/lib/schemas/ec_signature_parameter_schema.json\");","module.exports = require(\"@0x/json-schemas/lib/schemas/hex_schema.json\");","exports.loanOrderSchema = {\r\n  id: \"/loanOrder\",\r\n  properties: {\r\n    bZxAddress: { $ref: \"/addressSchema\" },\r\n    makerAddress: { $ref: \"/addressSchema\" },\r\n    takerAddress: { $ref: \"/addressSchema\" },\r\n    loanTokenAddress: { $ref: \"/addressSchema\" },\r\n    interestTokenAddress: { $ref: \"/addressSchema\" },\r\n    collateralTokenAddress: { $ref: \"/addressSchema\" },\r\n    feeRecipientAddress: { $ref: \"/addressSchema\" },\r\n    tradeTokenToFillAddress: { $ref: \"/addressSchema\" },\r\n    oracleAddress: { $ref: \"/addressSchema\" },\r\n    loanTokenAmount: { $ref: \"/numberSchema\" },\r\n    interestAmount: { $ref: \"/numberSchema\" },\r\n    initialMarginAmount: { $ref: \"/numberSchema\" },\r\n    maintenanceMarginAmount: { $ref: \"/numberSchema\" },\r\n    lenderRelayFee: { $ref: \"/numberSchema\" },\r\n    traderRelayFee: { $ref: \"/numberSchema\" },\r\n    maxDurationUnixTimestampSec: { $ref: \"/numberSchema\" },\r\n    expirationUnixTimestampSec: { $ref: \"/numberSchema\" },\r\n    makerRole: { $ref: \"/numberSchema\" },\r\n    withdrawOnOpen: { $ref: \"/numberSchema\" },\r\n    salt: { $ref: \"/numberSchema\" }\r\n  },\r\n  required: [\r\n    \"bZxAddress\",\r\n    \"makerAddress\",\r\n    \"takerAddress\",\r\n    \"loanTokenAddress\",\r\n    \"interestTokenAddress\",\r\n    \"collateralTokenAddress\",\r\n    \"feeRecipientAddress\",\r\n    \"tradeTokenToFillAddress\",\r\n    \"oracleAddress\",\r\n    \"loanTokenAmount\",\r\n    \"interestAmount\",\r\n    \"initialMarginAmount\",\r\n    \"maintenanceMarginAmount\",\r\n    \"lenderRelayFee\",\r\n    \"traderRelayFee\",\r\n    \"maxDurationUnixTimestampSec\",\r\n    \"expirationUnixTimestampSec\",\r\n    \"makerRole\",\r\n    \"withdrawOnOpen\",\r\n    \"salt\"\r\n  ],\r\n  type: \"object\"\r\n};\r\nexports.signedLoanOrderSchema = {\r\n  id: \"/signedLoanOrder\",\r\n  allOf: [\r\n    { $ref: \"/loanOrder\" },\r\n    {\r\n      properties: {\r\n        ecSignature: { $ref: \"/hexSchema\" }\r\n      },\r\n      required: [\"ecSignature\"]\r\n    }\r\n  ]\r\n};\r\n","module.exports = require(\"@0x/utils\");","import BZx from \"./BZx.json\";\r\nimport BZxOracle from \"./BZxOracle.json\";\r\nimport BZxTo0x from \"./BZxTo0x.json\";\r\nimport BZxToken from \"./BZRxToken.json\";\r\nimport BZRxTokenConvert from \"./BZRxTokenConvert.json\";\r\nimport BZxVault from \"./BZxVault.json\";\r\nimport EIP20 from \"./EIP20.json\";\r\nimport OracleRegistry from \"./OracleRegistry.json\";\r\nimport TokenRegistry from \"./TokenRegistry.json\";\r\nimport OracleInterface from \"./OracleInterface.json\";\r\nimport TestNetFaucet from \"./TestNetFaucet.json\";\r\nimport ZRXToken from \"./ZRXToken.json\";\r\nimport WETH from \"./WETH.json\";\r\nimport LoanToken from \"./LoanToken.json\";\r\nimport PositionToken from \"./PositionToken.json\";\r\nimport TokenizedRegistry from \"./TokenizedRegistry.json\";\r\n\r\nexport default {\r\n  BZx,\r\n  BZxOracle,\r\n  BZxTo0x,\r\n  BZxToken,\r\n  BZRxTokenConvert,\r\n  BZxVault,\r\n  EIP20,\r\n  OracleRegistry,\r\n  TokenRegistry,\r\n  ZRXToken,\r\n  WETH,\r\n  OracleInterface,\r\n  TestNetFaucet,\r\n  LoanToken,\r\n  PositionToken,\r\n  TokenizedRegistry\r\n};\r\n","import { BigNumber } from \"bignumber.js\";\r\nimport { map, mapAccum, pipe, zipWith } from \"ramda\";\r\nimport { assert } from \"@0x/assert\";\r\nimport * as utils from \"../core/utils\";\r\nimport { getContracts/* , oracleList */ } from \"../contracts\";\r\nimport * as Addresses from \"../addresses\";\r\n\r\nexport const getOracleListRaw = async ({ web3, networkId }) => {\r\n  const ORACLE_ADDRESSES = 0;\r\n  const ORACLE_NAME_LENGTHS = 1;\r\n  const ORACLE_NAMES_ALL_CONCAT = 2;\r\n\r\n  const oracleRegistryContract = await utils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).OracleRegistry.abi,\r\n    Addresses.getAddresses(networkId).OracleRegistry\r\n  );\r\n\r\n  const res = await oracleRegistryContract.methods.getOracleList().call();\r\n  const oracleAddresses = res[ORACLE_ADDRESSES];\r\n  const oracleNameLengths = res[ORACLE_NAME_LENGTHS];\r\n  const oracleNamesAllConcat = res[ORACLE_NAMES_ALL_CONCAT];\r\n\r\n  return {\r\n    oracleAddresses,\r\n    oracleNameLengths,\r\n    oracleNamesAllConcat\r\n  };\r\n};\r\n\r\nexport const cleanOracleNames = ({\r\n  oracleNameLengths,\r\n  oracleNamesAllConcat\r\n}) => {\r\n  const convertStrToNum = map(str => Number(str));\r\n  const getSubstringIndiciesPairs = lengths => {\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [accum, indiciesPairs] = mapAccum(\r\n      (acc, val) => [acc + val, [acc, acc + val]],\r\n      0\r\n    )(lengths);\r\n    return indiciesPairs;\r\n  };\r\n  const getNames = map(indicies =>\r\n    oracleNamesAllConcat.substring(indicies[0], indicies[1])\r\n  );\r\n\r\n  const oracleNames = pipe(\r\n    convertStrToNum,\r\n    getSubstringIndiciesPairs,\r\n    getNames\r\n  )(oracleNameLengths);\r\n\r\n  return oracleNames;\r\n};\r\n\r\nexport const formatOracleList = ({ oracleAddresses, oracleNames }) =>\r\n  zipWith(\r\n    (address, name) => ({ address: address.toLowerCase(), name }),\r\n    oracleAddresses,\r\n    oracleNames\r\n  );\r\n\r\nexport const getOracleList = async ({ web3, networkId }) => {\r\n\r\n  /* const oracles = await oracleList(networkId);\r\n  if (oracles)\r\n    return oracles; */\r\n\r\n  // Fallback to on chain OracleRegistry if local list not found\r\n  // Note: The local list is a stopgap to address MetaMask/Infura instability\r\n\r\n  const {\r\n    oracleAddresses,\r\n    oracleNameLengths,\r\n    oracleNamesAllConcat\r\n  } = await getOracleListRaw({ web3, networkId });\r\n\r\n  const oracleNames = cleanOracleNames({\r\n    oracleNameLengths,\r\n    oracleNamesAllConcat\r\n  });\r\n\r\n  return formatOracleList({ oracleAddresses, oracleNames });\r\n};\r\n\r\nexport const isTradeSupported = async (\r\n  { web3, networkId },\r\n  { sourceTokenAddress, destTokenAddress, oracleAddress, sourceTokenAmount }\r\n) => {\r\n  assert.isETHAddressHex(\"sourceTokenAddress\", sourceTokenAddress);\r\n  assert.isETHAddressHex(\"destTokenAddress\", destTokenAddress);\r\n  assert.isETHAddressHex(\"oracleAddress\", oracleAddress);\r\n\r\n  const oracleContract = await utils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).OracleInterface.abi,\r\n    oracleAddress\r\n  );\r\n\r\n  const queriesP = Promise.all([\r\n    oracleContract.methods\r\n      .isTradeSupported(sourceTokenAddress, destTokenAddress, sourceTokenAmount)\r\n      .call(),\r\n    oracleContract.methods\r\n      .isTradeSupported(destTokenAddress, sourceTokenAddress, sourceTokenAmount)\r\n      .call()\r\n  ]);\r\n\r\n  const [isSupportedForward, isSupportedReverse] = await queriesP;\r\n  const isSupported = isSupportedForward && isSupportedReverse;\r\n\r\n  return isSupported;\r\n};\r\n\r\nexport const getConversionData = async (\r\n  { web3, networkId },\r\n  sourceTokenAddress,\r\n  destTokenAddress,\r\n  sourceTokenAmount,\r\n  oracleAddress\r\n) => {\r\n  assert.isETHAddressHex(\"sourceTokenAddress\", sourceTokenAddress);\r\n  assert.isETHAddressHex(\"destTokenAddress\", destTokenAddress);\r\n  assert.isETHAddressHex(\"oracleAddress\", oracleAddress);\r\n\r\n  const oracleContract = await utils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).OracleInterface.abi,\r\n    oracleAddress\r\n  );\r\n\r\n  console.log(`conversion data params: `,sourceTokenAddress, destTokenAddress, sourceTokenAmount);\r\n  const data = await oracleContract.methods\r\n    .getTradeData(sourceTokenAddress, destTokenAddress, sourceTokenAmount)\r\n    .call();\r\n  console.log(`conversion data return: `,data);\r\n\r\n  return {\r\n    rate: 0 in data && data[0] ? data[0] : new BigNumber(0),\r\n    precision: 1 in data && data[1] ? data[1] : new BigNumber(0),\r\n    amount: 2 in data && data[2] ? data[2] : new BigNumber(0)\r\n  };\r\n};\r\n","import * as Signature from \"../signature\";\r\nimport * as CoreUtils from \"../core/utils\";\r\nimport * as Constants from \"../core/constants\";\r\nimport { getContracts } from \"../contracts\";\r\nimport * as Addresses from \"../addresses\";\r\n\r\nconst checkForValidSignature = order => {\r\n  Signature.isValidSignature({\r\n    account: order.makerAddress,\r\n    orderHash: CoreUtils.getLoanOrderHashHex(order),\r\n    signature: order.signature\r\n  });\r\n};\r\n\r\nexport const takeLoanOrderAsLender = (\r\n  { web3, networkId },\r\n  { order, oracleData, getObject, txOpts }\r\n) => {\r\n  checkForValidSignature(order);\r\n\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const orderAddresses = [\r\n    order.makerAddress,\r\n    order.loanTokenAddress,\r\n    order.interestTokenAddress,\r\n    order.collateralTokenAddress,\r\n    order.feeRecipientAddress,\r\n    order.oracleAddress,\r\n    order.takerAddress,\r\n    order.tradeTokenToFillAddress\r\n  ];\r\n\r\n  const orderValues = [\r\n    order.loanTokenAmount,\r\n    order.interestAmount,\r\n    order.initialMarginAmount,\r\n    order.maintenanceMarginAmount,\r\n    order.lenderRelayFee,\r\n    order.traderRelayFee,\r\n    order.maxDurationUnixTimestampSec,\r\n    order.expirationUnixTimestampSec,\r\n    order.makerRole,\r\n    order.withdrawOnOpen,\r\n    order.salt\r\n  ];\r\n\r\n  const txObj = bZxContract.methods.takeLoanOrderAsLender(\r\n    orderAddresses,\r\n    orderValues,\r\n    oracleData || \"0x\",\r\n    order.signature\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const takeLoanOrderAsTrader = (\r\n  { web3, networkId },\r\n  { order, oracleData, collateralTokenAddress, loanTokenAmountFilled, tradeTokenToFillAddress, withdrawOnOpen, getObject, txOpts }\r\n) => {\r\n  checkForValidSignature(order);\r\n  console.log(order, oracleData, collateralTokenAddress, loanTokenAmountFilled, tradeTokenToFillAddress, withdrawOnOpen, getObject, txOpts);\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const orderAddresses = [\r\n    order.makerAddress,\r\n    order.loanTokenAddress,\r\n    order.interestTokenAddress,\r\n    order.collateralTokenAddress,\r\n    order.feeRecipientAddress,\r\n    order.oracleAddress,\r\n    order.takerAddress,\r\n    order.tradeTokenToFillAddress\r\n  ];\r\n\r\n  const orderValues = [\r\n    order.loanTokenAmount,\r\n    order.interestAmount,\r\n    order.initialMarginAmount,\r\n    order.maintenanceMarginAmount,\r\n    order.lenderRelayFee,\r\n    order.traderRelayFee,\r\n    order.maxDurationUnixTimestampSec,\r\n    order.expirationUnixTimestampSec,\r\n    order.makerRole,\r\n    order.withdrawOnOpen,\r\n    order.salt\r\n  ];\r\n\r\n  const txObj = bZxContract.methods.takeLoanOrderAsTrader(\r\n     orderAddresses,\r\n     orderValues,\r\n     oracleData || \"0x\",\r\n     collateralTokenAddress,\r\n     web3.utils.toBN(loanTokenAmountFilled).toString(10),\r\n     tradeTokenToFillAddress || Constants.NULL_ADDRESS,\r\n     withdrawOnOpen || false,\r\n     order.signature\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const pushLoanOrderOnChain = (\r\n  { web3, networkId },\r\n  { order, oracleData, getObject, txOpts }\r\n) => {\r\n  if (order.signature)\r\n    checkForValidSignature(order);\r\n\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const orderAddresses = [\r\n    order.makerAddress,\r\n    order.loanTokenAddress,\r\n    order.interestTokenAddress,\r\n    order.collateralTokenAddress,\r\n    order.feeRecipientAddress,\r\n    order.oracleAddress,\r\n    order.takerAddress,\r\n    order.tradeTokenToFillAddress\r\n  ];\r\n\r\n  const orderValues = [\r\n    web3.utils.toBN(order.loanTokenAmount).toString(10),\r\n    web3.utils.toBN(order.interestAmount).toString(10),\r\n    web3.utils.toBN(order.initialMarginAmount).toString(10),\r\n    web3.utils.toBN(order.maintenanceMarginAmount).toString(10),\r\n    web3.utils.toBN(order.lenderRelayFee).toString(10),\r\n    web3.utils.toBN(order.traderRelayFee).toString(10),\r\n    web3.utils.toBN(order.maxDurationUnixTimestampSec).toString(10),\r\n    web3.utils.toBN(order.expirationUnixTimestampSec).toString(10),\r\n    web3.utils.toBN(order.makerRole).toString(10),\r\n    web3.utils.toBN(order.withdrawOnOpen).toString(10),\r\n    web3.utils.toBN(order.salt).toString(10)\r\n  ];\r\n\r\n  const txObj = bZxContract.methods.pushLoanOrderOnChain(\r\n    orderAddresses,\r\n    orderValues,\r\n    oracleData || \"0x\",\r\n    order.signature || \"0x\" // if maker is pushing order, no signature is needed\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const takeLoanOrderOnChainAsTrader = (\r\n  { web3, networkId },\r\n  {\r\n    loanOrderHash,\r\n    collateralTokenAddress,\r\n    loanTokenAmountFilled,\r\n    tradeTokenToFillAddress,\r\n    withdrawOnOpen,\r\n    getObject,\r\n    txOpts\r\n  }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.takeLoanOrderOnChainAsTrader(\r\n    loanOrderHash,\r\n    collateralTokenAddress,\r\n    web3.utils.toBN(loanTokenAmountFilled).toString(10),\r\n    tradeTokenToFillAddress || Constants.NULL_ADDRESS,\r\n    withdrawOnOpen || false\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const takeLoanOrderOnChainAsLender = (\r\n  { web3, networkId },\r\n  { loanOrderHash, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.takeLoanOrderOnChainAsLender(loanOrderHash);\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const cancelLoanOrder = (\r\n  { web3, networkId },\r\n  { order, oracleData, cancelLoanTokenAmount, getObject, txOpts }\r\n) => {\r\n  //checkForValidSignature(order);\r\n\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const orderAddresses = [\r\n    order.makerAddress,\r\n    order.loanTokenAddress,\r\n    order.interestTokenAddress,\r\n    order.collateralTokenAddress,\r\n    order.feeRecipientAddress,\r\n    order.oracleAddress,\r\n    order.takerAddress,\r\n    order.tradeTokenToFillAddress\r\n  ];\r\n\r\n  const orderValues = [\r\n    order.loanTokenAmount,\r\n    order.interestAmount,\r\n    order.initialMarginAmount,\r\n    order.maintenanceMarginAmount,\r\n    order.lenderRelayFee,\r\n    order.traderRelayFee,\r\n    order.maxDurationUnixTimestampSec,\r\n    order.expirationUnixTimestampSec,\r\n    order.makerRole,\r\n    order.withdrawOnOpen,\r\n    order.salt\r\n  ];\r\n\r\n  const txObj = bZxContract.methods.cancelLoanOrder(\r\n    orderAddresses,\r\n    orderValues,\r\n    oracleData || \"0x\",\r\n    web3.utils.toBN(cancelLoanTokenAmount).toString(10)\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const cancelLoanOrderWithHash = (\r\n  { web3, networkId },\r\n  { loanOrderHash, cancelLoanTokenAmount, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.cancelLoanOrderWithHash(\r\n    loanOrderHash,\r\n    web3.utils.toBN(cancelLoanTokenAmount).toString(10)\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const getInitialCollateralRequired = async (\r\n  { web3, networkId },\r\n  loanTokenAddress,\r\n  collateralTokenAddress,\r\n  oracleAddress,\r\n  loanTokenAmountFilled,\r\n  initialMarginAmount\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n  let initialCollateralRequired = null;\r\n  try {\r\n    initialCollateralRequired = await bZxContract.methods\r\n      .getInitialCollateralRequired(\r\n        loanTokenAddress,\r\n        collateralTokenAddress,\r\n        oracleAddress,\r\n        loanTokenAmountFilled,\r\n        initialMarginAmount\r\n      )\r\n      .call();\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  return initialCollateralRequired;\r\n};\r\n\r\nexport const orderFilledAmount = async (\r\n  { web3, networkId },\r\n  loanOrderHash\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n  let filledAmount = null;\r\n  try {\r\n    filledAmount = await bZxContract.methods\r\n      .orderFilledAmounts(loanOrderHash)\r\n      .call();\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  return filledAmount;\r\n};\r\n\r\nexport const orderCancelledAmount = async (\r\n  { web3, networkId },\r\n  loanOrderHash\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n  let cancelledAmount = null;\r\n  try {\r\n    cancelledAmount = await bZxContract.methods\r\n      .orderCancelledAmounts(loanOrderHash)\r\n      .call();\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  return cancelledAmount;\r\n};\r\n","module.exports = require(\"eth-sig-util\");","import * as ethUtil from \"ethereumjs-util\";\r\n\r\nexport const isValidSignature = (data, signature, signerAddress) => {\r\n  const dataBuff = ethUtil.toBuffer(data);\r\n  const msgHashBuff = ethUtil.hashPersonalMessage(dataBuff);\r\n  try {\r\n    const pubKey = ethUtil.ecrecover(\r\n      msgHashBuff,\r\n      signature.v,\r\n      ethUtil.toBuffer(signature.r),\r\n      ethUtil.toBuffer(signature.s)\r\n    );\r\n    const retrievedAddress = ethUtil.bufferToHex(ethUtil.pubToAddress(pubKey));\r\n    return retrievedAddress === signerAddress;\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const parseSignatureHexAsVRS = signatureHex => {\r\n  const signatureBuffer = ethUtil.toBuffer(signatureHex);\r\n  let v = signatureBuffer[0];\r\n  if (v < 27) {\r\n    v += 27;\r\n  }\r\n  const r = signatureBuffer.slice(1, 33);\r\n  const s = signatureBuffer.slice(33, 65);\r\n  const ecSignature = {\r\n    v,\r\n    r: ethUtil.bufferToHex(r),\r\n    s: ethUtil.bufferToHex(s)\r\n  };\r\n  return ecSignature;\r\n};\r\n\r\nexport const parseSignatureHexAsRSV = signatureHex => {\r\n  const sig = ethUtil.fromRpcSig(signatureHex);\r\n  const ecSignature = {\r\n    v: sig.v,\r\n    r: ethUtil.bufferToHex(sig.r),\r\n    s: ethUtil.bufferToHex(sig.s)\r\n  };\r\n  return ecSignature;\r\n};\r\n","import * as CoreUtils from \"../core/utils\";\r\nimport { NULL_ADDRESS } from \"../core/constants\";\r\nimport { getContracts } from \"../contracts\";\r\nimport * as Addresses from \"../addresses\";\r\nimport * as OrderUtils from \"./utils/orders\";\r\n\r\nexport const getSingleOrder = async (\r\n  { web3, networkId },\r\n  { loanOrderHash }\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const data = await bZxContract.methods.getSingleOrder(loanOrderHash).call();\r\n\r\n  const cleanedData = OrderUtils.cleanData(data);\r\n  if (cleanedData.length > 0) return cleanedData[0];\r\n  return {};\r\n};\r\n\r\nexport const getOrdersFillable = async (\r\n  { web3, networkId },\r\n  { start, count, oracleFilter }\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const data = await bZxContract.methods.getOrdersFillable(\r\n\t  web3.utils.toBN(start).toString(10),\r\n\t  web3.utils.toBN(count).toString(10),\r\n\t  web3.utils.isAddress(oracleFilter) ? oracleFilter : NULL_ADDRESS\r\n  ).call();\r\n\r\n  return OrderUtils.cleanData(data);\r\n};\r\n\r\nexport const getOrdersForUser = async (\r\n  { web3, networkId },\r\n  { loanPartyAddress, start, count, oracleFilter }\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const data = await bZxContract.methods\r\n    .getOrdersForUser(\r\n        loanPartyAddress,\r\n        web3.utils.toBN(start).toString(10),\r\n        web3.utils.toBN(count).toString(10),\r\n        web3.utils.isAddress(oracleFilter) ? oracleFilter : NULL_ADDRESS\r\n    ).call();\r\n\r\n  return OrderUtils.cleanData(data);\r\n};\r\n\r\nexport * from \"./loans\";\r\n","import * as CoreUtils from \"../core/utils\";\r\nimport { getContracts } from \"../contracts\";\r\nimport * as Addresses from \"../addresses\";\r\nimport * as LoanPosUtils from \"./utils/loanPositions\";\r\n\r\nexport const getSingleLoan = async (\r\n  { web3, networkId },\r\n  { loanOrderHash, trader }\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const data = await bZxContract.methods\r\n    .getSingleLoan(loanOrderHash, trader)\r\n    .call();\r\n\r\n  const cleanedData = LoanPosUtils.cleanData(data);\r\n  if (cleanedData.length > 0) return cleanedData[0];\r\n  return {};\r\n};\r\n\r\nexport const getLoansForLender = async (\r\n  { web3, networkId },\r\n  { address, count, activeOnly }\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const data = await bZxContract.methods\r\n    .getLoansForLender(address, count, activeOnly)\r\n    .call();\r\n\r\n  return LoanPosUtils.cleanData(data);\r\n};\r\n\r\nexport const getLoansForTrader = async (\r\n  { web3, networkId },\r\n  { address, count, activeOnly }\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const data = await bZxContract.methods\r\n    .getLoansForTrader(address, count, activeOnly)\r\n    .call();\r\n\r\n  return LoanPosUtils.cleanData(data);\r\n};\r\n","import { pipe, map } from \"ramda\";\r\nimport * as Utils from \"./index\";\r\n\r\nconst NUM_LOAN_POS_FIELDS = 15;\r\n\r\nconst getLoanPosition = params => ({\r\n  ...map(pipe(Utils.substr24, Utils.prepend0x), {\r\n    lender: params[0],\r\n    trader: params[1],\r\n    collateralTokenAddressFilled: params[2],\r\n    positionTokenAddressFilled: params[3],\r\n    loanTokenAddress: params[11],\r\n    interestTokenAddress: params[12]\r\n  }),\r\n  ...map(pipe(Utils.prepend0x, Utils.parseIntHex), {\r\n    loanTokenAmountFilled: params[4],\r\n    collateralTokenAmountFilled: params[5],\r\n    positionTokenAmountFilled: params[6],\r\n    loanStartUnixTimestampSec: params[7],\r\n    loanEndUnixTimestampSec: params[8],\r\n    active: params[9],\r\n    interestPaidTotal: params[13],\r\n    interestDepositRemaining: params[14]\r\n  }),\r\n  ...map(pipe(Utils.prepend0x), {\r\n    loanOrderHash: params[10]\r\n  })\r\n});\r\n\r\nconst checkProperObjCount = Utils.makeCheckProperObjCount(NUM_LOAN_POS_FIELDS);\r\nconst getOrderObjArray = Utils.makeGetOrderObjArray(NUM_LOAN_POS_FIELDS);\r\n\r\nexport const cleanData = raw => \r\n  raw && raw !== \"0x\"\r\n    ? pipe(\r\n        Utils.remove0xPrefix,\r\n        checkProperObjCount,\r\n        getOrderObjArray,\r\n        map(\r\n          pipe(\r\n            Utils.getOrderParams,\r\n            getLoanPosition\r\n          )\r\n        )\r\n      )(raw)\r\n    : [];\r\n","import { pipe, map } from \"ramda\";\r\nimport * as Utils from \"./index\";\r\n\r\nconst NUM_ORDER_FIELDS = 23;\r\n\r\nconst getOrder = params => ({\r\n  ...map(\r\n    pipe(\r\n      Utils.substr24,\r\n      Utils.prepend0x\r\n    ),\r\n    {\r\n      makerAddress: params[0],\r\n      takerAddress: params[20],\r\n      loanTokenAddress: params[1],\r\n      interestTokenAddress: params[2],\r\n      collateralTokenAddress: params[3],\r\n      feeRecipientAddress: params[4],\r\n      oracleAddress: params[5],\r\n      lender: params[15],\r\n      tradeTokenToFillAddress: params[21]\r\n    }\r\n  ),\r\n  ...map(\r\n    pipe(\r\n      Utils.prepend0x,\r\n      Utils.parseIntHex\r\n    ),\r\n    {\r\n      loanTokenAmount: params[6],\r\n      interestAmount: params[7],\r\n      initialMarginAmount: params[8],\r\n      maintenanceMarginAmount: params[9],\r\n      lenderRelayFee: params[10],\r\n      traderRelayFee: params[11],\r\n      maxDurationUnixTimestampSec: params[12],\r\n      expirationUnixTimestampSec: params[13],\r\n      orderFilledAmount: params[16],\r\n      orderCancelledAmount: params[17],\r\n      orderTraderCount: params[18],\r\n      addedUnixTimestampSec: params[19],\r\n      withdrawOnOpen: params[22]\r\n    }\r\n  ),\r\n  loanOrderHash: Utils.prepend0x(params[14])\r\n});\r\n\r\nconst checkProperObjCount = Utils.makeCheckProperObjCount(NUM_ORDER_FIELDS);\r\nconst getOrderObjArray = Utils.makeGetOrderObjArray(NUM_ORDER_FIELDS);\r\n\r\nexport const cleanData = raw =>\r\n  raw && raw !== \"0x\"\r\n    ? pipe(\r\n        Utils.remove0xPrefix,\r\n        checkProperObjCount,\r\n        getOrderObjArray,\r\n        map(\r\n          pipe(\r\n            Utils.getOrderParams,\r\n            getOrder\r\n          )\r\n        )\r\n      )(raw)\r\n    : [];\r\n","export const ContractDoesNotExist = \"Contract does not exist at address.\";\r\nexport const NoNetworkId = \"Missing networkId. Provide a networkId param.\";\r\nexport const InvalidSignature = \"Signature is invalid.\";\r\n","import { pipe, repeat } from \"ramda\";\r\nimport Web3Utils from \"web3-utils\";\r\nimport BN from \"bn.js\";\r\nimport ethABI from \"ethereumjs-abi\";\r\nimport ethUtil from \"ethereumjs-util\";\r\nimport OrderUtils from \"@0x/order-utils\";\r\n\r\nimport * as CoreUtils from \"../core/utils\";\r\nimport { getContracts } from \"../contracts\";\r\nimport * as ZeroExTradeUtils from \"./utils/zeroEx\";\r\nimport * as Signature from \"../signature\";\r\n\r\nconst makeBN = arg => new BN(arg);\r\nconst padLeft = arg => Web3Utils.padLeft(arg, 64);\r\nconst prepend0x = arg => `0x${arg}`;\r\n\r\nexport const tradePositionWith0x = (\r\n  { web3, networkId },\r\n  { order0x, orderHashBZx, getObject, txOpts }\r\n) => {\r\n  const rpcSig0x = ethUtil.toRpcSig(\r\n    order0x.signedOrder.ecSignature.v,\r\n    order0x.signedOrder.ecSignature.r,\r\n    order0x.signedOrder.ecSignature.s\r\n  );\r\n\r\n  const transformedOrder0x = ZeroExTradeUtils.transform0xOrder(order0x);\r\n  const orderHash0x = OrderUtils.getOrderHashHex(transformedOrder0x);\r\n\r\n  Signature.isValidSignature({\r\n    account: order0x.signedOrder.maker,\r\n    orderHash: orderHash0x,\r\n    signature: rpcSig0x\r\n  });\r\n\r\n  const contracts = getContracts(networkId);\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    contracts.BZx.abi,\r\n    contracts.BZx.addresses[networkId]\r\n  );\r\n\r\n  const values = [\r\n    ...[\r\n      transformedOrder0x.maker,\r\n      transformedOrder0x.taker,\r\n      transformedOrder0x.makerTokenAddress,\r\n      transformedOrder0x.takerTokenAddress,\r\n      transformedOrder0x.feeRecipient\r\n    ].map(padLeft),\r\n    ...[\r\n      transformedOrder0x.makerTokenAmount,\r\n      transformedOrder0x.takerTokenAmount,\r\n      transformedOrder0x.makerFee,\r\n      transformedOrder0x.takerFee,\r\n      transformedOrder0x.expirationUnixTimestampSec,\r\n      transformedOrder0x.salt\r\n    ].map(value =>\r\n      pipe(\r\n        makeBN,\r\n        padLeft,\r\n        prepend0x\r\n      )(value)\r\n    )\r\n  ];\r\n\r\n  const types = repeat(\"bytes32\", values.length);\r\n  const hashBuff = ethABI.solidityPack(types, values);\r\n  const order0xTightlyPacked = ethUtil.bufferToHex(hashBuff);\r\n\r\n  const txObj = bZxContract.methods.tradePositionWith0x(\r\n    orderHashBZx,\r\n    order0xTightlyPacked,\r\n    rpcSig0x\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const tradePositionWith0xV2 = (\r\n  { web3, networkId },\r\n  { order0x, orderHashBZx, getObject, txOpts }\r\n) => {\r\n  const contracts = getContracts(networkId);\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    contracts.BZx.abi,\r\n    contracts.BZx.addresses[networkId]\r\n  );\r\n\r\n  const preppedOrders = [];\r\n  const sigs = [];\r\n\r\n  if (Array.isArray(order0x)) {\r\n    for(let i=0; i < order0x.length; i+=1) {\r\n      preppedOrders.push([\r\n        order0x[i].signedOrder.makerAddress,\r\n        order0x[i].signedOrder.takerAddress,\r\n        order0x[i].signedOrder.feeRecipientAddress,\r\n        order0x[i].signedOrder.senderAddress,\r\n        order0x[i].signedOrder.makerAssetAmount,\r\n        order0x[i].signedOrder.takerAssetAmount,\r\n        order0x[i].signedOrder.makerFee,\r\n        order0x[i].signedOrder.takerFee,\r\n        order0x[i].signedOrder.expirationTimeSeconds,\r\n        order0x[i].signedOrder.salt,\r\n        order0x[i].signedOrder.makerAssetData,\r\n        order0x[i].signedOrder.takerAssetData\r\n      ]);\r\n      sigs.push(order0x[i].signedOrder.signature);\r\n    }\r\n  } else {\r\n    preppedOrders.push([\r\n      order0x.signedOrder.makerAddress,\r\n      order0x.signedOrder.takerAddress,\r\n      order0x.signedOrder.feeRecipientAddress,\r\n      order0x.signedOrder.senderAddress,\r\n      order0x.signedOrder.makerAssetAmount,\r\n      order0x.signedOrder.takerAssetAmount,\r\n      order0x.signedOrder.makerFee,\r\n      order0x.signedOrder.takerFee,\r\n      order0x.signedOrder.expirationTimeSeconds,\r\n      order0x.signedOrder.salt,\r\n      order0x.signedOrder.makerAssetData,\r\n      order0x.signedOrder.takerAssetData\r\n    ]);\r\n    sigs.push(order0x.signedOrder.signature);\r\n  }\r\n\r\n  const txObj = bZxContract.methods.tradePositionWith0xV2(\r\n    orderHashBZx,\r\n    preppedOrders,\r\n    sigs\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const tradePositionWithOracle = (\r\n  { web3, networkId },\r\n  { orderHash, tradeTokenAddress, getObject, txOpts = {} } = {}\r\n) => {\r\n  const contracts = getContracts(networkId);\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    contracts.BZx.abi,\r\n    contracts.BZx.addresses[networkId]\r\n  );\r\n\r\n  const txObj = bZxContract.methods.tradePositionWithOracle(\r\n    orderHash,\r\n    tradeTokenAddress\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n","module.exports = require(\"ethereumjs-abi\");","module.exports = require(\"@0x/order-utils\");","import * as constants from \"../../core/constants\";\r\n\r\nexport const transform0xOrder = ({ signedOrder }) => ({\r\n  exchangeContractAddress: signedOrder.exchangeContractAddress,\r\n  expirationUnixTimestampSec: signedOrder.expirationUnixTimestampSec,\r\n  feeRecipient: signedOrder.feeRecipient,\r\n  maker: signedOrder.maker,\r\n  makerFee: signedOrder.makerFee,\r\n  makerTokenAddress: signedOrder.makerTokenAddress,\r\n  makerTokenAmount: signedOrder.makerTokenAmount,\r\n  salt: signedOrder.salt,\r\n  taker: signedOrder.taker || constants.NULL_ADDRESS,\r\n  takerFee: signedOrder.takerFee,\r\n  takerTokenAddress: signedOrder.takerTokenAddress,\r\n  takerTokenAmount: signedOrder.takerTokenAmount\r\n});\r\n","import * as CoreUtils from \"../core/utils\";\r\nimport { getContracts } from \"../contracts\";\r\n\r\nexport const depositCollateral = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, depositTokenAddress, depositAmount, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.depositCollateral(\r\n    loanOrderHash,\r\n    depositTokenAddress,\r\n    web3.utils.toBN(depositAmount).toString(10)\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const withdrawCollateral = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, withdrawAmount, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.withdrawCollateral(\r\n    loanOrderHash,\r\n    web3.utils.toBN(withdrawAmount).toString(10)\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const changeCollateral = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, collateralTokenFilled, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.changeCollateral(\r\n    loanOrderHash,\r\n    collateralTokenFilled\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const withdrawPosition = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, withdrawAmount, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.withdrawPosition(\r\n    loanOrderHash,\r\n    web3.utils.toBN(withdrawAmount).toString(10)\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const depositPosition = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, depositTokenAddress, depositAmount, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.depositPosition(\r\n    loanOrderHash,\r\n    depositTokenAddress,\r\n    web3.utils.toBN(depositAmount).toString(10)\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const getPositionOffset = async (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, trader }\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const data = await bZxContract.methods\r\n    .getPositionOffset(loanOrderHash, trader)\r\n    .call();\r\n\r\n  return {\r\n    isPositive: data.isPositive,\r\n    positionOffsetAmount: data.positionOffsetAmount,\r\n    loanOffsetAmount: data.loanOffsetAmount,\r\n   \tcollateralOffsetAmount: data.collateralOffsetAmount\r\n  };\r\n};\r\n\r\nexport const payInterestForOrder = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.payInterestForOrder(loanOrderHash);\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const payInterestForOracle = (\r\n  { web3, networkId, addresses },\r\n  { oracleAddress, interestTokenAddress, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.payInterestForOrder(oracleAddress, interestTokenAddress);\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const getLenderInterestForOracle = async (\r\n  { web3, networkId, addresses },\r\n  { lender, oracleAddress, interestTokenAddress }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n  const data = await bZxContract.methods\r\n    .getLenderInterestForToken(lender, oracleAddress, interestTokenAddress)\r\n    .call();\r\n  return {\r\n    interestPaid: data[0],\r\n    interestPaidDate: data[1],\r\n    interestOwedPerDay: data[2],\r\n    interestUnPaid: data[3]\r\n  };\r\n};\r\n\r\nexport const getLenderInterestForOrder = async (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n  const data = await bZxContract.methods\r\n    .getLenderInterestForOrder(loanOrderHash)\r\n    .call();\r\n  return {\r\n    lender: data[0],\r\n    interestTokenAddress: data[1],\r\n    interestPaid: data[2],\r\n    interestPaidDate: data[3],\r\n    interestOwedPerDay: data[4],\r\n    interestUnPaid: data[5]\r\n  };\r\n};\r\n\r\nexport const getTraderInterestForLoan = async (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, trader }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n  const data = await bZxContract.methods\r\n    .getTraderInterestForLoan(loanOrderHash, trader)\r\n    .call();\r\n  return {\r\n    interestTokenAddress: data[0],\r\n    interestOwedPerDay: data[1],\r\n    interestPaidTotal: data[2],\r\n    interestDepositTotal: data[3],\r\n    interestDepositRemaining: data[4]\r\n  };\r\n};\r\n\r\nexport const closeLoanPartially = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, closeAmount, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.closeLoanPartially(\r\n    loanOrderHash,\r\n    web3.utils.toBN(closeAmount).toString(10)\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const closeLoan = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.closeLoan(loanOrderHash);\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};","import * as CoreUtils from \"../core/utils\";\r\nimport { getContracts } from \"../contracts\";\r\nimport * as ActiveLoansUtils from \"./utils/activeLoans\";\r\n\r\nexport const getActiveLoans = async (\r\n  { web3, networkId, addresses },\r\n  { start, count }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n  const data = await bZxContract.methods.getActiveLoans(web3.utils.toBN(start).toString(10), web3.utils.toBN(count).toString(10)).call();\r\n  return ActiveLoansUtils.cleanData(data);\r\n};\r\n\r\nexport const getMarginLevels = async (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, trader }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n  const data = await bZxContract.methods\r\n    .getMarginLevels(loanOrderHash, trader)\r\n    .call();\r\n  return {\r\n    initialMarginAmount: data[0],\r\n    maintenanceMarginAmount: data[1],\r\n    currentMarginAmount: data[2]\r\n  };\r\n};\r\n\r\nexport const liquidateLoan = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, trader, liquidateAmount, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.liquidatePosition(\r\n    loanOrderHash,\r\n    trader,\r\n    liquidateAmount ? liquidateAmount : \"0\"\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n","import { pipe, map } from \"ramda\";\r\nimport * as OrderHistoryUtils from \"../../orderHistory/utils/index\";\r\n\r\nconst NUM_LOAN_FIELDS = 3;\r\n\r\nconst getLoan = params => ({\r\n  loanOrderHash: OrderHistoryUtils.prepend0x(params[0]),\r\n  trader: pipe(\r\n    OrderHistoryUtils.substr24,\r\n    OrderHistoryUtils.prepend0x\r\n  )(params[1]),\r\n  loanEndUnixTimestampSec: OrderHistoryUtils.parseIntHex(params[2])\r\n});\r\n\r\nconst checkProperObjCount = OrderHistoryUtils.makeCheckProperObjCount(\r\n  NUM_LOAN_FIELDS\r\n);\r\nconst getOrderObjArray = OrderHistoryUtils.makeGetOrderObjArray(\r\n  NUM_LOAN_FIELDS\r\n);\r\n\r\nexport const cleanData = raw =>\r\n  raw && raw !== \"0x\"\r\n    ? pipe(\r\n        OrderHistoryUtils.remove0xPrefix,\r\n        checkProperObjCount,\r\n        getOrderObjArray,\r\n        map(\r\n          pipe(\r\n            OrderHistoryUtils.getOrderParams,\r\n            getLoan\r\n          )\r\n        )\r\n      )(raw)\r\n    : [];\r\n"],"sourceRoot":""}