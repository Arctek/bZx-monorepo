{"version":3,"sources":["webpack://bzx.js/webpack/universalModuleDefinition","webpack://bzx.js/webpack/bootstrap","webpack://bzx.js/./src/contracts/index.js","webpack://bzx.js/./src/core/utils/index.js","webpack://bzx.js/external \"ramda\"","webpack://bzx.js/./src/addresses/index.js","webpack://bzx.js/./src/core/constants/index.js","webpack://bzx.js/external \"@0x/assert\"","webpack://bzx.js/./src/signature/index.js","webpack://bzx.js/external \"ethereumjs-util\"","webpack://bzx.js/./src/orderHistory/utils/index.js","webpack://bzx.js/external \"bignumber.js\"","webpack://bzx.js/./src/schemas/bZx_json_schemas.js","webpack://bzx.js/external \"lodash\"","webpack://bzx.js/external \"bn.js\"","webpack://bzx.js/external \"web3-utils\"","webpack://bzx.js/./src/core/index.js","webpack://bzx.js/external \"jsonschema\"","webpack://bzx.js/external \"@0x/json-schemas/lib/schemas/number_schema.json\"","webpack://bzx.js/external \"@0x/json-schemas/lib/schemas/address_schema.json\"","webpack://bzx.js/external \"@0x/json-schemas/lib/schemas/ec_signature_schema.json\"","webpack://bzx.js/external \"@0x/json-schemas/lib/schemas/ec_signature_parameter_schema.json\"","webpack://bzx.js/external \"@0x/json-schemas/lib/schemas/hex_schema.json\"","webpack://bzx.js/./src/schemas/bZx_order_schemas.js","webpack://bzx.js/external \"@0x/utils\"","webpack://bzx.js/./src/contracts/merged/index.js","webpack://bzx.js/./src/oracles/index.js","webpack://bzx.js/./src/fill/index.js","webpack://bzx.js/external \"eth-sig-util\"","webpack://bzx.js/./src/signature/utils/index.js","webpack://bzx.js/./src/orderHistory/index.js","webpack://bzx.js/./src/orderHistory/loans.js","webpack://bzx.js/./src/orderHistory/utils/loanPositions.js","webpack://bzx.js/./src/orderHistory/utils/orders.js","webpack://bzx.js/./src/core/constants/errors.js","webpack://bzx.js/./src/trade/index.js","webpack://bzx.js/external \"ethereumjs-abi\"","webpack://bzx.js/external \"@0x/order-utils\"","webpack://bzx.js/./src/trade/utils/zeroEx.js","webpack://bzx.js/./src/loanHealth/index.js","webpack://bzx.js/./src/bounty/index.js","webpack://bzx.js/./src/bounty/utils/activeLoans.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","networksRaw","local","merged","mainnet","ropsten","kovan","rinkeby","getContracts","networkId","tokenList","undefined","oracleList","Web3Utils","constants","Addresses","noop","bigNumberToBN","BN","toString","getLoanOrderHashArgs","generatePseudoRandomSalt","randomNumber","BigNumber","random","MAX_DIGITS_IN_UNSIGNED_256_INT","factor","pow","times","integerValue","ROUND_CEIL","order","shouldFormatAsStrings","orderAddresses","makerAddress","loanTokenAddress","interestTokenAddress","collateralTokenAddress","feeRecipientAddress","oracleAddress","takerAddress","tradeTokenToFillAddress","orderValues","loanTokenAmount","interestAmount","initialMarginAmount","maintenanceMarginAmount","lenderRelayFee","traderRelayFee","maxDurationUnixTimestampSec","expirationUnixTimestampSec","makerRole","withdrawOnOpen","salt","getOrderValues","oracleData","doesContractExistAtAddress","web3","address","code","eth","getCode","test","getContractInstance","abi","assert","isETHAddressHex","Contract","getLoanOrderHashHex","soliditySha3","v","bZxAddress","getLoanOrderHashAsync","BZx","getAddresses","methods","getLoanOrderHash","doesConformToSchema","variableName","schema","validationResult","SchemaValidator","validate","hasValidationErrors","errors","length","msg","id","JSON","stringify","join","toChecksumAddress","addr","requestFaucetToken","tokenAddress","receiverAddress","getObject","txOpts","txObj","TestNetFaucet","faucet","console","log","encodeABI","send","getWeb3Contract","contractName","contractAddress","require","pipe","raw","map","contract","addresses","toLowerCase","SOLIDITY_TYPE_MAX_CHARS","NULL_ADDRESS","UNLIMITED_ALLOWANCE_IN_BASE_UNITS","minus","ethUtil","signatureUtils","CoreUtils","SignatureTypeStr","freeze","Illegal","Invalid","EIP712","EthSign","Caller","Wallet","Validator","PreSigned","Trezor","signOrderHashAsync","orderHash","signerAddress","shouldAddPersonalMessagePrefix","isHexString","nodeVersion","version","node","isParityNode","_","includes","isTestRpc","signature","sign","msgHashHex","orderHashBuff","toBuffer","msgHashBuff","hashPersonalMessage","bufferToHex","validVParamValues","ecSignatureVRS","parseSignatureHexAsVRS","isValidSignature","toRpcSig","ecSignatureRSV","parseSignatureHexAsRSV","Error","account","substr","sigUtil","recoverPersonalSignature","data","sig","isValidSignatureAsync","bZxContract","remove0xPrefix","makeCheckProperObjCount","numFields","makeGetOrderObjArray","match","RegExp","getOrderParams","prepend0x","arg","substr24","parseIntHex","parseInt","jsonschema_1","ValidatorResult","number_schema_1","address_schema_1","ec_signature_schema_1","ec_signature_parameter_schema_1","hex_schema_1","order_schemas_1","schemas","numberSchema","addressSchema","ecSignatureSchema","ecSignatureParameterSchema","hexSchema","loanOrderSchema","signedLoanOrderSchema","validator","_i","_a","values","addSchema","instance","jsonSchemaCompatibleObject","parse","isValid","utils","oracles","fill","orderHistory","Errors","trade","loanHealth","bounty","BZxJS","constructor","props","getOracleList","getConversionData","takeLoanOrderAsLender","takeLoanOrderAsTrader","getInitialCollateralRequired","getSingleOrder","getOrdersForUser","getSingleLoan","getLoansForLender","getLoansForTrader","tradePositionWith0xV2","tradePositionWithOracle","depositCollateral","withdrawCollateral","changeCollateral","withdrawPosition","depositPosition","getPositionOffset","closeLoan","getLenderInterestForOrder","payInterestForOracle","getLenderInterestForOracle","getTraderInterestForLoan","payInterestForOrder","getMarginLevels","liquidateLoan","NoNetworkId","networkName","etherscanURL","properties","$ref","required","type","allOf","ecSignature","OracleRegistry","OracleInterface","BZxVault","BZRxToken","BZRxTokenConvert","getOracleListRaw","oracleRegistryContract","res","oracleAddresses","oracleNameLengths","oracleNamesAllConcat","cleanOracleNames","convertStrToNum","str","Number","getNames","indicies","substring","lengths","accum","indiciesPairs","mapAccum","acc","val","formatOracleList","oracleNames","zipWith","isTradeSupported","sourceTokenAddress","destTokenAddress","sourceTokenAmount","oracleContract","queriesP","Promise","all","isSupportedForward","isSupportedReverse","getTradeData","rate","precision","amount","Signature","Constants","checkForValidSignature","loanTokenAmountFilled","toBN","pushLoanOrderOnChain","takeLoanOrderOnChainAsTrader","loanOrderHash","takeLoanOrderOnChainAsLender","cancelLoanOrder","cancelLoanTokenAmount","cancelLoanOrderWithHash","initialCollateralRequired","e","orderFilledAmount","filledAmount","orderFilledAmounts","orderCancelledAmount","cancelledAmount","orderCancelledAmounts","dataBuff","pubKey","ecrecover","pubToAddress","err","signatureHex","signatureBuffer","slice","fromRpcSig","OrderUtils","cleanedData","cleanData","getOrdersFillable","start","count","oracleFilter","isAddress","loanPartyAddress","LoanPosUtils","trader","activeOnly","Utils","getLoanPosition","params","lender","collateralTokenAddressFilled","positionTokenAddressFilled","collateralTokenAmountFilled","positionTokenAmountFilled","loanStartUnixTimestampSec","loanEndUnixTimestampSec","active","interestPaidTotal","interestDepositRemaining","checkProperObjCount","getOrderObjArray","getOrder","orderTraderCount","addedUnixTimestampSec","ContractDoesNotExist","InvalidSignature","ZeroExTradeUtils","makeBN","padLeft","tradePositionWith0x","order0x","orderHashBZx","rpcSig0x","signedOrder","transformedOrder0x","transform0xOrder","orderHash0x","getOrderHashHex","maker","contracts","taker","makerTokenAddress","takerTokenAddress","feeRecipient","makerTokenAmount","takerTokenAmount","makerFee","takerFee","types","repeat","hashBuff","ethABI","solidityPack","order0xTightlyPacked","preppedOrders","sigs","Array","isArray","push","senderAddress","makerAssetAmount","takerAssetAmount","expirationTimeSeconds","makerAssetData","takerAssetData","tradeTokenAddress","exchangeContractAddress","depositTokenAddress","depositAmount","withdrawAmount","collateralTokenFilled","isPositive","positionOffsetAmount","loanOffsetAmount","collateralOffsetAmount","interestPaid","interestPaidDate","interestOwedPerDay","interestUnPaid","interestDepositTotal","closeLoanPartially","closeAmount","ActiveLoansUtils","getActiveLoans","currentMarginAmount","liquidateAmount","liquidatePosition","OrderHistoryUtils","getLoan"],"mappings":"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","file":"bzx.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"bzx.js\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bzx.js\"] = factory();\n\telse\n\t\troot[\"bzx.js\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","import { map } from \"ramda\";\r\nimport merged from \"./merged\";\r\n\r\nconst networksRaw = {\r\n  local: merged,\r\n  mainnet: merged,\r\n  ropsten: merged,\r\n  kovan: merged,\r\n  rinkeby: merged\r\n};\r\n\r\nexport const { local, mainnet, ropsten, kovan, rinkeby } = networksRaw;\r\n\r\nconst networksById = {\r\n  1: mainnet,\r\n  3: ropsten,\r\n  4: rinkeby,\r\n  42: kovan\r\n};\r\n\r\n\r\nexport const getContracts = (networkId = null) => merged;\r\n\r\nexport const tokenList = (networkId = null) => undefined;\r\n\r\nexport const oracleList = (networkId = null) => undefined;\r\n","import { BigNumber } from \"@0x/utils\";\r\nimport { assert } from \"@0x/assert\";\r\nimport BN from \"bn.js\";\r\nimport * as Web3Utils from \"web3-utils\";\r\nimport * as constants from \"../constants\";\r\nimport { SchemaValidator } from \"../../schemas/bZx_json_schemas\";\r\nimport { getContracts } from \"../../contracts\";\r\nimport * as Addresses from \"../../addresses\";\r\n\r\nexport const noop = () => {};\r\n\r\nexport const bigNumberToBN = value => new BN(value.toString(), 10);\r\n\r\nexport const generatePseudoRandomSalt = () => {\r\n  // BigNumber.random returns a pseudo-random number between 0 & 1\r\n  // with a passed in number of decimal places.\r\n  // Source: https://mikemcl.github.io/bignumber.js/#random\r\n  const randomNumber = BigNumber.random(\r\n    constants.MAX_DIGITS_IN_UNSIGNED_256_INT\r\n  );\r\n  const factor = new BigNumber(10).pow(\r\n    constants.MAX_DIGITS_IN_UNSIGNED_256_INT - 1\r\n  );\r\n  const salt = randomNumber.times(factor).integerValue(BigNumber.ROUND_CEIL);\r\n  return salt;\r\n};\r\n\r\nconst getOrderValues = (order, shouldFormatAsStrings) => {\r\n  // Must be strings in production for Web3Utils.soliditySha3 for some reason\r\n  if (shouldFormatAsStrings) {\r\n    return [\r\n      order.loanTokenAmount.toString(),\r\n      order.interestAmount.toString(),\r\n      order.initialMarginAmount.toString(),\r\n      order.maintenanceMarginAmount.toString(),\r\n      order.lenderRelayFee.toString(),\r\n      order.traderRelayFee.toString(),\r\n      order.maxDurationUnixTimestampSec.toString(),\r\n      order.expirationUnixTimestampSec.toString(),\r\n      order.makerRole.toString(),\r\n      order.withdrawOnOpen.toString(),\r\n      order.salt.toString()\r\n    ];\r\n  }\r\n  return [\r\n    bigNumberToBN(order.loanTokenAmount),\r\n    bigNumberToBN(order.interestAmount),\r\n    bigNumberToBN(order.initialMarginAmount),\r\n    bigNumberToBN(order.maintenanceMarginAmount),\r\n    bigNumberToBN(order.lenderRelayFee),\r\n    bigNumberToBN(order.traderRelayFee),\r\n    bigNumberToBN(order.maxDurationUnixTimestampSec),\r\n    bigNumberToBN(order.expirationUnixTimestampSec),\r\n    bigNumberToBN(order.makerRole),\r\n    bigNumberToBN(order.withdrawOnOpen),\r\n    bigNumberToBN(order.salt)\r\n  ];\r\n};\r\n\r\nconst getLoanOrderHashArgs = (order, shouldFormatAsStrings) => {\r\n  const orderAddresses = [\r\n    order.makerAddress,\r\n    order.loanTokenAddress,\r\n    order.interestTokenAddress,\r\n    order.collateralTokenAddress,\r\n    order.feeRecipientAddress,\r\n    order.oracleAddress,\r\n    order.takerAddress,\r\n    order.tradeTokenToFillAddress\r\n  ];\r\n  const orderValues = getOrderValues(order, shouldFormatAsStrings);\r\n  const oracleData = order.oracleData || \"0x\";\r\n\r\n  return { orderAddresses, orderValues, oracleData };\r\n};\r\n\r\nexport const doesContractExistAtAddress = async (web3, address) => {\r\n  const code = await web3.eth.getCode(address);\r\n  // Regex matches 0x0, 0x00, 0x in order to accommodate poorly implemented clients\r\n  const codeIsEmpty = /^0x0{0,40}$/i.test(code);\r\n  return !codeIsEmpty;\r\n};\r\n\r\nexport const getContractInstance = (web3, abi, address) => {\r\n  assert.isETHAddressHex(\"address\", address);\r\n  const contract = new web3.eth.Contract(abi, address);\r\n  return contract;\r\n};\r\n\r\nexport const getLoanOrderHashHex = order => {\r\n  const { orderAddresses, orderValues, oracleData } = getLoanOrderHashArgs(order, true);\r\n  const orderHashHex = Web3Utils.soliditySha3(\r\n    { t: \"address\", v: order.bZxAddress },\r\n    { t: \"address[8]\", v: orderAddresses },\r\n    { t: \"uint256[11]\", v: orderValues },\r\n    { t: \"bytes\", v: oracleData }\r\n  );\r\n  return orderHashHex;\r\n};\r\n\r\nexport const getLoanOrderHashAsync = async ({ web3, networkId }, order) => {\r\n  const { orderAddresses, orderValues, oracleData } = getLoanOrderHashArgs(order, true);\r\n  const bZxContract = await getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n  return bZxContract.methods\r\n    .getLoanOrderHash(\r\n      orderAddresses,\r\n      orderValues,\r\n      oracleData\r\n    )\r\n    .call();\r\n};\r\n\r\nexport const doesConformToSchema = (variableName, value, schema) => {\r\n  const schemaValidator = new SchemaValidator();\r\n  const validationResult = schemaValidator.validate(value, schema);\r\n  const hasValidationErrors = validationResult.errors.length > 0;\r\n  const msg = `Expected ${variableName} to conform to schema ${\r\n    schema.id\r\n  }\\nEncountered: ${JSON.stringify(\r\n    value,\r\n    null,\r\n    \"\\t\"\r\n  )}\\nValidation errors: ${validationResult.errors.join(\", \")}`;\r\n  assert.assert(!hasValidationErrors, msg);\r\n};\r\n\r\nexport const toChecksumAddress = addr => Web3Utils.toChecksumAddress(addr);\r\n\r\nexport const requestFaucetToken = (\r\n  { web3, networkId },\r\n  { tokenAddress, receiverAddress, getObject, txOpts }\r\n) => {\r\n  const faucetContract = getContractInstance(\r\n    web3,\r\n    getContracts(networkId).TestNetFaucet.abi,\r\n    Addresses.getAddresses(networkId).TestNetFaucet\r\n  );\r\n\r\n  const txObj = faucetContract.methods.faucet(\r\n    toChecksumAddress(tokenAddress),\r\n    toChecksumAddress(receiverAddress)\r\n  );\r\n  console.log(`requestFaucetToken: ${txObj.encodeABI()}`);\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const getWeb3Contract = ({ web3, networkId }, contractName, contractAddress) => getContractInstance(\r\n    web3,\r\n    getContracts(networkId)[contractName].abi,\r\n    contractAddress ? contractAddress : Addresses.getAddresses(networkId)[contractName]\r\n  );\r\n","module.exports = require(\"ramda\");","import { map, pipe } from \"ramda\";\r\nimport { getContracts } from \"../contracts\";\r\n\r\nexport const getAddresses = networkId =>\r\n  pipe(\r\n    getContracts,\r\n    (raw) => pipe(\r\n        map(contract => contract.addresses[networkId]),\r\n        map(address => address ? address.toLowerCase() : \"\")\r\n    )(raw)\r\n  )(networkId);\r\n","import { BigNumber } from \"bignumber.js\";\r\n\r\nexport const SOLIDITY_TYPE_MAX_CHARS = 64;\r\nexport const NULL_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\nexport const UNLIMITED_ALLOWANCE_IN_BASE_UNITS = new BigNumber(2)\r\n  .pow(256)\r\n  .minus(1);\r\nexport const MAX_DIGITS_IN_UNSIGNED_256_INT = 78;\r\n","module.exports = require(\"@0x/assert\");","import sigUtil from \"eth-sig-util\";\r\nimport * as ethUtil from \"ethereumjs-util\";\r\nimport { assert } from \"@0x/assert\";\r\nimport _ from \"lodash\";\r\nimport * as signatureUtils from \"./utils\";\r\nimport * as CoreUtils from \"../core/utils\";\r\nimport { getContracts } from \"../contracts\";\r\nimport * as Addresses from \"../addresses\";\r\n\r\nconst SignatureTypeStr = Object.freeze({\r\n  Illegal: \"00\",\r\n  Invalid: \"01\",\r\n  EIP712: \"02\",\r\n  EthSign: \"03\",\r\n  Caller: \"04\",\r\n  Wallet: \"05\",\r\n  Validator: \"06\",\r\n  PreSigned: \"07\",\r\n  Trezor: \"08\"\r\n});\r\n\r\nexport const signOrderHashAsync = async (\r\n  { web3 },\r\n  orderHash,\r\n  signerAddress,\r\n  // Metamask provider needs shouldAddPersonalMessagePrefix to be true\r\n  shouldAddPersonalMessagePrefix\r\n) => {\r\n  assert.isHexString(\"orderHash\", orderHash);\r\n  assert.isETHAddressHex(\"signerAddress\", signerAddress);\r\n  const nodeVersion = web3.version.node;\r\n  const isParityNode = _.includes(nodeVersion, \"Parity\");\r\n  const isTestRpc = _.includes(nodeVersion, \"TestRPC\");\r\n  let signature = null;\r\n\r\n  if (isParityNode || isTestRpc) {\r\n    // Parity and TestRpc nodes add the personalMessage prefix itself\r\n    signature = await web3.eth.sign(orderHash, signerAddress);\r\n  } else {\r\n    let msgHashHex = orderHash;\r\n    if (shouldAddPersonalMessagePrefix) {\r\n      const orderHashBuff = ethUtil.toBuffer(orderHash);\r\n      const msgHashBuff = ethUtil.hashPersonalMessage(orderHashBuff);\r\n      msgHashHex = ethUtil.bufferToHex(msgHashBuff);\r\n    }\r\n    signature = await web3.eth.sign(msgHashHex, signerAddress);\r\n  }\r\n\r\n  // HACK: There is no consensus on whether the signatureHex string should be formatted as\r\n  // v + r + s OR r + s + v, and different clients (even different versions of the same client)\r\n  // return the signature params in different orders. In order to support all client implementations,\r\n  // we parse the signature in both ways, and evaluate if either one is a valid signature.\r\n  const validVParamValues = [27, 28];\r\n  const ecSignatureVRS = signatureUtils.parseSignatureHexAsVRS(signature);\r\n  if (_.includes(validVParamValues, ecSignatureVRS.v)) {\r\n    const isValidVRSSignature = signatureUtils.isValidSignature(\r\n      orderHash,\r\n      ecSignatureVRS,\r\n      signerAddress\r\n    );\r\n    if (isValidVRSSignature) {\r\n      return (\r\n        ethUtil.toRpcSig(ecSignatureVRS.v, ecSignatureVRS.r, ecSignatureVRS.s) +\r\n        SignatureTypeStr.EthSign\r\n      );\r\n    }\r\n  }\r\n\r\n  const ecSignatureRSV = signatureUtils.parseSignatureHexAsRSV(signature);\r\n  if (_.includes(validVParamValues, ecSignatureRSV.v)) {\r\n    const isValidRSVSignature = signatureUtils.isValidSignature(\r\n      orderHash,\r\n      ecSignatureRSV,\r\n      signerAddress\r\n    );\r\n    if (isValidRSVSignature) {\r\n      return (\r\n        ethUtil.toRpcSig(ecSignatureRSV.v, ecSignatureRSV.r, ecSignatureRSV.s) +\r\n        SignatureTypeStr.EthSign\r\n      );\r\n    }\r\n  }\r\n\r\n  throw new Error(\"InvalidSignature\");\r\n};\r\n\r\nexport const isValidSignature = ({ account, orderHash, signature }) => {\r\n  // hack to support 0x v2 EthSign SignatureType format\r\n  // recoverPersonalSignature assumes no SignatureType ending\r\n  signature = signature.substr(0, 132); // eslint-disable-line no-param-reassign\r\n\r\n  const recoveredAccount = sigUtil.recoverPersonalSignature({\r\n    data: orderHash,\r\n    sig: signature\r\n  });\r\n  return recoveredAccount === account;\r\n};\r\n\r\nexport const isValidSignatureAsync = async (\r\n  { web3, networkId },\r\n  { account, orderHash, signature }\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  // hack to support 0x v2 EthSign SignatureType format\r\n  // bZx requires SignatureType ending\r\n  signature = signature.substr(0, 132) + SignatureTypeStr.EthSign; // eslint-disable-line no-param-reassign\r\n\r\n  return bZxContract.methods\r\n    .isValidSignature(account, orderHash, signature)\r\n    .call();\r\n};\r\n","module.exports = require(\"ethereumjs-util\");","import { SOLIDITY_TYPE_MAX_CHARS } from \"../../core/constants\";\r\n\r\nexport const remove0xPrefix = data => (data ? data.substr(2) : \"\");\r\n\r\nexport const makeCheckProperObjCount = numFields => data => {\r\n  const objCount = data.length / SOLIDITY_TYPE_MAX_CHARS / numFields;\r\n  if (objCount % 1 !== 0)\r\n    throw new Error(\"Data length invalid, must be whole number of objects\");\r\n  return data;\r\n};\r\n\r\nexport const makeGetOrderObjArray = numFields => data =>\r\n  data.match(new RegExp(`.{1,${numFields * SOLIDITY_TYPE_MAX_CHARS}}`, \"g\"));\r\n\r\nexport const getOrderParams = data =>\r\n  data.match(new RegExp(`.{1,${SOLIDITY_TYPE_MAX_CHARS}}`, \"g\"));\r\n\r\nconst HEX_RADIX = 16;\r\nexport const prepend0x = arg => `0x${arg}`;\r\nexport const substr24 = arg => arg.substr(24);\r\nexport const parseIntHex = arg => parseInt(arg, HEX_RADIX);\r\n","module.exports = require(\"bignumber.js\");","/* eslint-disable camelcase, no-underscore-dangle */\r\nconst jsonschema_1 = require(\"jsonschema\");\r\nconst _ = require(\"lodash\");\r\n\r\nexports.ValidatorResult = jsonschema_1.ValidatorResult;\r\n\r\nconst number_schema_1 = require(\"@0x/json-schemas/lib/schemas/number_schema.json\");\r\nconst address_schema_1 = require(\"@0x/json-schemas/lib/schemas/address_schema.json\");\r\nconst ec_signature_schema_1 = require(\"@0x/json-schemas/lib/schemas/ec_signature_schema.json\");\r\nconst ec_signature_parameter_schema_1 = require(\"@0x/json-schemas/lib/schemas/ec_signature_parameter_schema.json\");\r\nconst hex_schema_1 = require(\"@0x/json-schemas/lib/schemas/hex_schema.json\");\r\n\r\nconst order_schemas_1 = require(\"./bZx_order_schemas.js\");\r\n\r\nexports.schemas = {\r\n  numberSchema: number_schema_1,\r\n  addressSchema: address_schema_1,\r\n  ecSignatureSchema: ec_signature_schema_1,\r\n  ecSignatureParameterSchema: ec_signature_parameter_schema_1,\r\n  hexSchema: hex_schema_1,\r\n  loanOrderSchema: order_schemas_1.loanOrderSchema,\r\n  signedLoanOrderSchema: order_schemas_1.signedLoanOrderSchema\r\n};\r\n\r\nconst SchemaValidator = (function() {\r\n  // eslint-disable-next-line no-shadow\r\n  function SchemaValidator() {\r\n    this.validator = new jsonschema_1.Validator();\r\n    // eslint-disable-next-line no-plusplus\r\n    for (let _i = 0, _a = _.values(exports.schemas); _i < _a.length; _i++) {\r\n      const schema = _a[_i];\r\n      this.validator.addSchema(schema, schema.id);\r\n    }\r\n  }\r\n  SchemaValidator.prototype.addSchema = function(schema) {\r\n    this.validator.addSchema(schema, schema.id);\r\n  };\r\n  // In order to validate a complex JS object using jsonschema, we must replace any complex\r\n  // sub-types (e.g BigNumber) with a simpler string representation. Since BigNumber and other\r\n  // complex types implement the `toString` method, we can stringify the object and\r\n  // then parse it. The resultant object can then be checked using jsonschema.\r\n  SchemaValidator.prototype.validate = function(instance, schema) {\r\n    const jsonSchemaCompatibleObject = JSON.parse(JSON.stringify(instance));\r\n    return this.validator.validate(jsonSchemaCompatibleObject, schema);\r\n  };\r\n  SchemaValidator.prototype.isValid = function(instance, schema) {\r\n    const isValid = this.validate(instance, schema).errors.length === 0;\r\n    return isValid;\r\n  };\r\n  return SchemaValidator;\r\n})();\r\nexports.SchemaValidator = SchemaValidator;\r\n","module.exports = require(\"lodash\");","module.exports = require(\"bn.js\");","module.exports = require(\"web3-utils\");","import * as constants from \"./constants\";\r\nimport { schemas } from \"../schemas/bZx_json_schemas\";\r\nimport * as utils from \"./utils\";\r\nimport * as oracles from \"../oracles\";\r\nimport * as fill from \"../fill\";\r\nimport * as Addresses from \"../addresses\";\r\nimport * as orderHistory from \"../orderHistory\";\r\nimport * as signature from \"../signature\";\r\nimport * as Errors from \"./constants/errors\";\r\nimport * as trade from \"../trade\";\r\nimport * as loanHealth from \"../loanHealth\";\r\nimport * as bounty from \"../bounty\";\r\n\r\nexport class BZxJS {\r\n  static generatePseudoRandomSalt = utils.generatePseudoRandomSalt;\r\n  static noop = utils.noop;\r\n  static toChecksumAddress = utils.toChecksumAddress;\r\n\r\n  /* On Metamask, provider.host is undefined\r\n  Force users to provide host url */\r\n  constructor(web3, { networkId, addresses = Addresses.getAddresses(networkId) } = {}) {\r\n    if (!networkId) throw new Error(Errors.NoNetworkId);\r\n\r\n    this.web3 = web3;\r\n    this.addresses = addresses;\r\n    this.networkId = networkId;\r\n    switch (networkId) {\r\n      case 1:\r\n        this.networkName = \"mainnet\";\r\n        this.etherscanURL = \"https://etherscan.io/\";\r\n        break;\r\n      case 3:\r\n        this.networkName = \"ropsten\";\r\n        this.etherscanURL = \"https://ropsten.etherscan.io/\";\r\n        break;\r\n      case 4:\r\n        this.networkName = \"rinkeby\";\r\n        this.etherscanURL = \"https://rinkeby.etherscan.io/\";\r\n        break;\r\n      case 42:\r\n        this.networkName = \"kovan\";\r\n        this.etherscanURL = \"https://kovan.etherscan.io/\";\r\n        break;\r\n      default:\r\n        this.networkName = \"local\";\r\n        this.etherscanURL = \"\";\r\n        break;\r\n    }\r\n  }\r\n\r\n  static getLoanOrderHashHex(order) {\r\n    utils.doesConformToSchema(\"loanOrder\", order, schemas.loanOrderSchema);\r\n    const orderHashHex = utils.getLoanOrderHashHex(order);\r\n    return orderHashHex;\r\n  }\r\n  getLoanOrderHashAsync = async props =>\r\n    utils.getLoanOrderHashAsync(this, props);\r\n\r\n  static isValidSignature = props => signature.isValidSignature(props);\r\n\r\n  isValidSignatureAsync = async props =>\r\n    signature.isValidSignatureAsync(this, props);\r\n\r\n  signOrderHashAsync = async (...props) =>\r\n    signature.signOrderHashAsync(this, ...props);\r\n\r\n  getOracleList = async () => oracles.getOracleList(this);\r\n  getConversionData = async (...props) =>\r\n    oracles.getConversionData(this, ...props);\r\n\r\n  takeLoanOrderAsLender = (...props) =>\r\n    fill.takeLoanOrderAsLender(this, ...props);\r\n\r\n  takeLoanOrderAsTrader = (...props) =>\r\n    fill.takeLoanOrderAsTrader(this, ...props);\r\n\r\n  getInitialCollateralRequired = async (...props) =>\r\n    fill.getInitialCollateralRequired(this, ...props);\r\n\r\n  getSingleOrder = async (...props) =>\r\n    orderHistory.getSingleOrder(this, ...props);\r\n  getOrdersForUser = async (...props) =>\r\n    orderHistory.getOrdersForUser(this, ...props);\r\n  getSingleLoan = async (...props) =>\r\n    orderHistory.getSingleLoan(this, ...props);\r\n  getLoansForLender = async (...props) =>\r\n    orderHistory.getLoansForLender(this, ...props);\r\n  getLoansForTrader = async (...props) =>\r\n    orderHistory.getLoansForTrader(this, ...props);\r\n\r\n  tradePositionWith0xV2 = (...props) => trade.tradePositionWith0xV2(this, ...props);\r\n  tradePositionWithOracle = (...props) =>\r\n    trade.tradePositionWithOracle(this, ...props);\r\n\r\n  depositCollateral = (...props) => loanHealth.depositCollateral(this, ...props);\r\n  withdrawCollateral = (...props) => loanHealth.withdrawCollateral(this, ...props);\r\n  changeCollateral = (...props) => loanHealth.changeCollateral(this, ...props);\r\n  withdrawPosition = (...props) => loanHealth.withdrawPosition(this, ...props);\r\n  depositPosition = (...props) => loanHealth.depositPosition(this, ...props);\r\n  getPositionOffset = (...props) => loanHealth.getPositionOffset(this, ...props);\r\n\r\n  closeLoan = (...props) => loanHealth.closeLoan(this, ...props);\r\n\r\n  getLenderInterestForOrder = (...props) => loanHealth.getLenderInterestForOrder(this, ...props);\r\n  payInterestForOracle = (...props) => loanHealth.payInterestForOracle(this, ...props);\r\n  getLenderInterestForOracle = (...props) => loanHealth.getLenderInterestForOracle(this, ...props);\r\n  getTraderInterestForLoan = (...props) => loanHealth.getTraderInterestForLoan(this, ...props);\r\n\r\n  payInterestForOrder = (...props) => loanHealth.payInterestForOrder(this, ...props);\r\n  getMarginLevels = (...props) => bounty.getMarginLevels(this, ...props);\r\n  liquidateLoan = (...props) => bounty.liquidateLoan(this, ...props);\r\n}\r\n\r\nexport default BZxJS;\r\n","module.exports = require(\"jsonschema\");","module.exports = require(\"@0x/json-schemas/lib/schemas/number_schema.json\");","module.exports = require(\"@0x/json-schemas/lib/schemas/address_schema.json\");","module.exports = require(\"@0x/json-schemas/lib/schemas/ec_signature_schema.json\");","module.exports = require(\"@0x/json-schemas/lib/schemas/ec_signature_parameter_schema.json\");","module.exports = require(\"@0x/json-schemas/lib/schemas/hex_schema.json\");","exports.loanOrderSchema = {\r\n  id: \"/loanOrder\",\r\n  properties: {\r\n    bZxAddress: { $ref: \"/addressSchema\" },\r\n    makerAddress: { $ref: \"/addressSchema\" },\r\n    takerAddress: { $ref: \"/addressSchema\" },\r\n    loanTokenAddress: { $ref: \"/addressSchema\" },\r\n    interestTokenAddress: { $ref: \"/addressSchema\" },\r\n    collateralTokenAddress: { $ref: \"/addressSchema\" },\r\n    feeRecipientAddress: { $ref: \"/addressSchema\" },\r\n    tradeTokenToFillAddress: { $ref: \"/addressSchema\" },\r\n    oracleAddress: { $ref: \"/addressSchema\" },\r\n    loanTokenAmount: { $ref: \"/numberSchema\" },\r\n    interestAmount: { $ref: \"/numberSchema\" },\r\n    initialMarginAmount: { $ref: \"/numberSchema\" },\r\n    maintenanceMarginAmount: { $ref: \"/numberSchema\" },\r\n    lenderRelayFee: { $ref: \"/numberSchema\" },\r\n    traderRelayFee: { $ref: \"/numberSchema\" },\r\n    maxDurationUnixTimestampSec: { $ref: \"/numberSchema\" },\r\n    expirationUnixTimestampSec: { $ref: \"/numberSchema\" },\r\n    makerRole: { $ref: \"/numberSchema\" },\r\n    withdrawOnOpen: { $ref: \"/numberSchema\" },\r\n    salt: { $ref: \"/numberSchema\" }\r\n  },\r\n  required: [\r\n    \"bZxAddress\",\r\n    \"makerAddress\",\r\n    \"takerAddress\",\r\n    \"loanTokenAddress\",\r\n    \"interestTokenAddress\",\r\n    \"collateralTokenAddress\",\r\n    \"feeRecipientAddress\",\r\n    \"tradeTokenToFillAddress\",\r\n    \"oracleAddress\",\r\n    \"loanTokenAmount\",\r\n    \"interestAmount\",\r\n    \"initialMarginAmount\",\r\n    \"maintenanceMarginAmount\",\r\n    \"lenderRelayFee\",\r\n    \"traderRelayFee\",\r\n    \"maxDurationUnixTimestampSec\",\r\n    \"expirationUnixTimestampSec\",\r\n    \"makerRole\",\r\n    \"withdrawOnOpen\",\r\n    \"salt\"\r\n  ],\r\n  type: \"object\"\r\n};\r\nexports.signedLoanOrderSchema = {\r\n  id: \"/signedLoanOrder\",\r\n  allOf: [\r\n    { $ref: \"/loanOrder\" },\r\n    {\r\n      properties: {\r\n        ecSignature: { $ref: \"/hexSchema\" }\r\n      },\r\n      required: [\"ecSignature\"]\r\n    }\r\n  ]\r\n};\r\n","module.exports = require(\"@0x/utils\");","import BZx from \"./BZx.json\";\r\nimport OracleRegistry from \"./OracleRegistry.json\";\r\nimport OracleInterface from \"./OracleInterface.json\";\r\nimport BZxVault from \"./BZxVault.json\";\r\nimport BZRxToken from \"./BZRxToken.json\";\r\nimport BZRxTokenConvert from \"./BZRxTokenConvert.json\";\r\n\r\nexport default {\r\n  BZx,\r\n  OracleRegistry,\r\n  OracleInterface,\r\n  BZxVault,\r\n  BZRxToken,\r\n  BZRxTokenConvert\r\n};\r\n","import { BigNumber } from \"bignumber.js\";\r\nimport { map, mapAccum, pipe, zipWith } from \"ramda\";\r\nimport { assert } from \"@0x/assert\";\r\nimport * as utils from \"../core/utils\";\r\nimport { getContracts/* , oracleList */ } from \"../contracts\";\r\nimport * as Addresses from \"../addresses\";\r\n\r\nexport const getOracleListRaw = async ({ web3, networkId }) => {\r\n  const ORACLE_ADDRESSES = 0;\r\n  const ORACLE_NAME_LENGTHS = 1;\r\n  const ORACLE_NAMES_ALL_CONCAT = 2;\r\n\r\n  const oracleRegistryContract = await utils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).OracleRegistry.abi,\r\n    Addresses.getAddresses(networkId).OracleRegistry\r\n  );\r\n\r\n  const res = await oracleRegistryContract.methods.getOracleList().call();\r\n  const oracleAddresses = res[ORACLE_ADDRESSES];\r\n  const oracleNameLengths = res[ORACLE_NAME_LENGTHS];\r\n  const oracleNamesAllConcat = res[ORACLE_NAMES_ALL_CONCAT];\r\n\r\n  return {\r\n    oracleAddresses,\r\n    oracleNameLengths,\r\n    oracleNamesAllConcat\r\n  };\r\n};\r\n\r\nexport const cleanOracleNames = ({\r\n  oracleNameLengths,\r\n  oracleNamesAllConcat\r\n}) => {\r\n  const convertStrToNum = map(str => Number(str));\r\n  const getSubstringIndiciesPairs = lengths => {\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [accum, indiciesPairs] = mapAccum(\r\n      (acc, val) => [acc + val, [acc, acc + val]],\r\n      0\r\n    )(lengths);\r\n    return indiciesPairs;\r\n  };\r\n  const getNames = map(indicies =>\r\n    oracleNamesAllConcat.substring(indicies[0], indicies[1])\r\n  );\r\n\r\n  const oracleNames = pipe(\r\n    convertStrToNum,\r\n    getSubstringIndiciesPairs,\r\n    getNames\r\n  )(oracleNameLengths);\r\n\r\n  return oracleNames;\r\n};\r\n\r\nexport const formatOracleList = ({ oracleAddresses, oracleNames }) =>\r\n  zipWith(\r\n    (address, name) => ({ address: address.toLowerCase(), name }),\r\n    oracleAddresses,\r\n    oracleNames\r\n  );\r\n\r\nexport const getOracleList = async ({ web3, networkId }) => {\r\n\r\n  /* const oracles = await oracleList(networkId);\r\n  if (oracles)\r\n    return oracles; */\r\n\r\n  // Fallback to on chain OracleRegistry if local list not found\r\n  // Note: The local list is a stopgap to address MetaMask/Infura instability\r\n\r\n  const {\r\n    oracleAddresses,\r\n    oracleNameLengths,\r\n    oracleNamesAllConcat\r\n  } = await getOracleListRaw({ web3, networkId });\r\n\r\n  const oracleNames = cleanOracleNames({\r\n    oracleNameLengths,\r\n    oracleNamesAllConcat\r\n  });\r\n\r\n  return formatOracleList({ oracleAddresses, oracleNames });\r\n};\r\n\r\nexport const isTradeSupported = async (\r\n  { web3, networkId },\r\n  { sourceTokenAddress, destTokenAddress, oracleAddress, sourceTokenAmount }\r\n) => {\r\n  assert.isETHAddressHex(\"sourceTokenAddress\", sourceTokenAddress);\r\n  assert.isETHAddressHex(\"destTokenAddress\", destTokenAddress);\r\n  assert.isETHAddressHex(\"oracleAddress\", oracleAddress);\r\n\r\n  const oracleContract = await utils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).OracleInterface.abi,\r\n    oracleAddress\r\n  );\r\n\r\n  const queriesP = Promise.all([\r\n    oracleContract.methods\r\n      .isTradeSupported(sourceTokenAddress, destTokenAddress, sourceTokenAmount)\r\n      .call(),\r\n    oracleContract.methods\r\n      .isTradeSupported(destTokenAddress, sourceTokenAddress, sourceTokenAmount)\r\n      .call()\r\n  ]);\r\n\r\n  const [isSupportedForward, isSupportedReverse] = await queriesP;\r\n  const isSupported = isSupportedForward && isSupportedReverse;\r\n\r\n  return isSupported;\r\n};\r\n\r\nexport const getConversionData = async (\r\n  { web3, networkId },\r\n  sourceTokenAddress,\r\n  destTokenAddress,\r\n  sourceTokenAmount,\r\n  oracleAddress\r\n) => {\r\n  assert.isETHAddressHex(\"sourceTokenAddress\", sourceTokenAddress);\r\n  assert.isETHAddressHex(\"destTokenAddress\", destTokenAddress);\r\n  assert.isETHAddressHex(\"oracleAddress\", oracleAddress);\r\n\r\n  const oracleContract = await utils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).OracleInterface.abi,\r\n    oracleAddress\r\n  );\r\n\r\n  console.log(`conversion data params: `,sourceTokenAddress, destTokenAddress, sourceTokenAmount);\r\n  const data = await oracleContract.methods\r\n    .getTradeData(sourceTokenAddress, destTokenAddress, sourceTokenAmount)\r\n    .call();\r\n  console.log(`conversion data return: `,data);\r\n\r\n  return {\r\n    rate: 0 in data && data[0] ? data[0] : new BigNumber(0),\r\n    precision: 1 in data && data[1] ? data[1] : new BigNumber(0),\r\n    amount: 2 in data && data[2] ? data[2] : new BigNumber(0)\r\n  };\r\n};\r\n","import * as Signature from \"../signature\";\r\nimport * as CoreUtils from \"../core/utils\";\r\nimport * as Constants from \"../core/constants\";\r\nimport { getContracts } from \"../contracts\";\r\nimport * as Addresses from \"../addresses\";\r\n\r\nconst checkForValidSignature = order => {\r\n  Signature.isValidSignature({\r\n    account: order.makerAddress,\r\n    orderHash: CoreUtils.getLoanOrderHashHex(order),\r\n    signature: order.signature\r\n  });\r\n};\r\n\r\nexport const takeLoanOrderAsLender = (\r\n  { web3, networkId },\r\n  { order, oracleData, getObject, txOpts }\r\n) => {\r\n  checkForValidSignature(order);\r\n\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const orderAddresses = [\r\n    order.makerAddress,\r\n    order.loanTokenAddress,\r\n    order.interestTokenAddress,\r\n    order.collateralTokenAddress,\r\n    order.feeRecipientAddress,\r\n    order.oracleAddress,\r\n    order.takerAddress,\r\n    order.tradeTokenToFillAddress\r\n  ];\r\n\r\n  const orderValues = [\r\n    order.loanTokenAmount,\r\n    order.interestAmount,\r\n    order.initialMarginAmount,\r\n    order.maintenanceMarginAmount,\r\n    order.lenderRelayFee,\r\n    order.traderRelayFee,\r\n    order.maxDurationUnixTimestampSec,\r\n    order.expirationUnixTimestampSec,\r\n    order.makerRole,\r\n    order.withdrawOnOpen,\r\n    order.salt\r\n  ];\r\n\r\n  const txObj = bZxContract.methods.takeLoanOrderAsLender(\r\n    orderAddresses,\r\n    orderValues,\r\n    oracleData || \"0x\",\r\n    order.signature\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const takeLoanOrderAsTrader = (\r\n  { web3, networkId },\r\n  { order, oracleData, collateralTokenAddress, loanTokenAmountFilled, tradeTokenToFillAddress, withdrawOnOpen, getObject, txOpts }\r\n) => {\r\n  checkForValidSignature(order);\r\n  console.log(order, oracleData, collateralTokenAddress, loanTokenAmountFilled, tradeTokenToFillAddress, withdrawOnOpen, getObject, txOpts);\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const orderAddresses = [\r\n    order.makerAddress,\r\n    order.loanTokenAddress,\r\n    order.interestTokenAddress,\r\n    order.collateralTokenAddress,\r\n    order.feeRecipientAddress,\r\n    order.oracleAddress,\r\n    order.takerAddress,\r\n    order.tradeTokenToFillAddress\r\n  ];\r\n\r\n  const orderValues = [\r\n    order.loanTokenAmount,\r\n    order.interestAmount,\r\n    order.initialMarginAmount,\r\n    order.maintenanceMarginAmount,\r\n    order.lenderRelayFee,\r\n    order.traderRelayFee,\r\n    order.maxDurationUnixTimestampSec,\r\n    order.expirationUnixTimestampSec,\r\n    order.makerRole,\r\n    order.withdrawOnOpen,\r\n    order.salt\r\n  ];\r\n\r\n  const txObj = bZxContract.methods.takeLoanOrderAsTrader(\r\n     orderAddresses,\r\n     orderValues,\r\n     oracleData || \"0x\",\r\n     collateralTokenAddress,\r\n     web3.utils.toBN(loanTokenAmountFilled).toString(10),\r\n     tradeTokenToFillAddress || Constants.NULL_ADDRESS,\r\n     withdrawOnOpen || false,\r\n     order.signature\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const pushLoanOrderOnChain = (\r\n  { web3, networkId },\r\n  { order, oracleData, getObject, txOpts }\r\n) => {\r\n  if (order.signature)\r\n    checkForValidSignature(order);\r\n\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const orderAddresses = [\r\n    order.makerAddress,\r\n    order.loanTokenAddress,\r\n    order.interestTokenAddress,\r\n    order.collateralTokenAddress,\r\n    order.feeRecipientAddress,\r\n    order.oracleAddress,\r\n    order.takerAddress,\r\n    order.tradeTokenToFillAddress\r\n  ];\r\n\r\n  const orderValues = [\r\n    web3.utils.toBN(order.loanTokenAmount).toString(10),\r\n    web3.utils.toBN(order.interestAmount).toString(10),\r\n    web3.utils.toBN(order.initialMarginAmount).toString(10),\r\n    web3.utils.toBN(order.maintenanceMarginAmount).toString(10),\r\n    web3.utils.toBN(order.lenderRelayFee).toString(10),\r\n    web3.utils.toBN(order.traderRelayFee).toString(10),\r\n    web3.utils.toBN(order.maxDurationUnixTimestampSec).toString(10),\r\n    web3.utils.toBN(order.expirationUnixTimestampSec).toString(10),\r\n    web3.utils.toBN(order.makerRole).toString(10),\r\n    web3.utils.toBN(order.withdrawOnOpen).toString(10),\r\n    web3.utils.toBN(order.salt).toString(10)\r\n  ];\r\n\r\n  const txObj = bZxContract.methods.pushLoanOrderOnChain(\r\n    orderAddresses,\r\n    orderValues,\r\n    oracleData || \"0x\",\r\n    order.signature || \"0x\" // if maker is pushing order, no signature is needed\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const takeLoanOrderOnChainAsTrader = (\r\n  { web3, networkId },\r\n  {\r\n    loanOrderHash,\r\n    collateralTokenAddress,\r\n    loanTokenAmountFilled,\r\n    tradeTokenToFillAddress,\r\n    withdrawOnOpen,\r\n    getObject,\r\n    txOpts\r\n  }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.takeLoanOrderOnChainAsTrader(\r\n    loanOrderHash,\r\n    collateralTokenAddress,\r\n    web3.utils.toBN(loanTokenAmountFilled).toString(10),\r\n    tradeTokenToFillAddress || Constants.NULL_ADDRESS,\r\n    withdrawOnOpen || false\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const takeLoanOrderOnChainAsLender = (\r\n  { web3, networkId },\r\n  { loanOrderHash, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.takeLoanOrderOnChainAsLender(loanOrderHash);\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const cancelLoanOrder = (\r\n  { web3, networkId },\r\n  { order, oracleData, cancelLoanTokenAmount, getObject, txOpts }\r\n) => {\r\n  //checkForValidSignature(order);\r\n\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const orderAddresses = [\r\n    order.makerAddress,\r\n    order.loanTokenAddress,\r\n    order.interestTokenAddress,\r\n    order.collateralTokenAddress,\r\n    order.feeRecipientAddress,\r\n    order.oracleAddress,\r\n    order.takerAddress,\r\n    order.tradeTokenToFillAddress\r\n  ];\r\n\r\n  const orderValues = [\r\n    order.loanTokenAmount,\r\n    order.interestAmount,\r\n    order.initialMarginAmount,\r\n    order.maintenanceMarginAmount,\r\n    order.lenderRelayFee,\r\n    order.traderRelayFee,\r\n    order.maxDurationUnixTimestampSec,\r\n    order.expirationUnixTimestampSec,\r\n    order.makerRole,\r\n    order.withdrawOnOpen,\r\n    order.salt\r\n  ];\r\n\r\n  const txObj = bZxContract.methods.cancelLoanOrder(\r\n    orderAddresses,\r\n    orderValues,\r\n    oracleData || \"0x\",\r\n    web3.utils.toBN(cancelLoanTokenAmount).toString(10)\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const cancelLoanOrderWithHash = (\r\n  { web3, networkId },\r\n  { loanOrderHash, cancelLoanTokenAmount, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.cancelLoanOrderWithHash(\r\n    loanOrderHash,\r\n    web3.utils.toBN(cancelLoanTokenAmount).toString(10)\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const getInitialCollateralRequired = async (\r\n  { web3, networkId },\r\n  loanTokenAddress,\r\n  collateralTokenAddress,\r\n  oracleAddress,\r\n  loanTokenAmountFilled,\r\n  initialMarginAmount\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n  let initialCollateralRequired = null;\r\n  try {\r\n    initialCollateralRequired = await bZxContract.methods\r\n      .getInitialCollateralRequired(\r\n        loanTokenAddress,\r\n        collateralTokenAddress,\r\n        oracleAddress,\r\n        loanTokenAmountFilled,\r\n        initialMarginAmount\r\n      )\r\n      .call();\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  return initialCollateralRequired;\r\n};\r\n\r\nexport const orderFilledAmount = async (\r\n  { web3, networkId },\r\n  loanOrderHash\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n  let filledAmount = null;\r\n  try {\r\n    filledAmount = await bZxContract.methods\r\n      .orderFilledAmounts(loanOrderHash)\r\n      .call();\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  return filledAmount;\r\n};\r\n\r\nexport const orderCancelledAmount = async (\r\n  { web3, networkId },\r\n  loanOrderHash\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n  let cancelledAmount = null;\r\n  try {\r\n    cancelledAmount = await bZxContract.methods\r\n      .orderCancelledAmounts(loanOrderHash)\r\n      .call();\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  return cancelledAmount;\r\n};\r\n","module.exports = require(\"eth-sig-util\");","import * as ethUtil from \"ethereumjs-util\";\r\n\r\nexport const isValidSignature = (data, signature, signerAddress) => {\r\n  const dataBuff = ethUtil.toBuffer(data);\r\n  const msgHashBuff = ethUtil.hashPersonalMessage(dataBuff);\r\n  try {\r\n    const pubKey = ethUtil.ecrecover(\r\n      msgHashBuff,\r\n      signature.v,\r\n      ethUtil.toBuffer(signature.r),\r\n      ethUtil.toBuffer(signature.s)\r\n    );\r\n    const retrievedAddress = ethUtil.bufferToHex(ethUtil.pubToAddress(pubKey));\r\n    return retrievedAddress === signerAddress;\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const parseSignatureHexAsVRS = signatureHex => {\r\n  const signatureBuffer = ethUtil.toBuffer(signatureHex);\r\n  let v = signatureBuffer[0];\r\n  if (v < 27) {\r\n    v += 27;\r\n  }\r\n  const r = signatureBuffer.slice(1, 33);\r\n  const s = signatureBuffer.slice(33, 65);\r\n  const ecSignature = {\r\n    v,\r\n    r: ethUtil.bufferToHex(r),\r\n    s: ethUtil.bufferToHex(s)\r\n  };\r\n  return ecSignature;\r\n};\r\n\r\nexport const parseSignatureHexAsRSV = signatureHex => {\r\n  const sig = ethUtil.fromRpcSig(signatureHex);\r\n  const ecSignature = {\r\n    v: sig.v,\r\n    r: ethUtil.bufferToHex(sig.r),\r\n    s: ethUtil.bufferToHex(sig.s)\r\n  };\r\n  return ecSignature;\r\n};\r\n","import * as CoreUtils from \"../core/utils\";\r\nimport { NULL_ADDRESS } from \"../core/constants\";\r\nimport { getContracts } from \"../contracts\";\r\nimport * as Addresses from \"../addresses\";\r\nimport * as OrderUtils from \"./utils/orders\";\r\n\r\nexport const getSingleOrder = async (\r\n  { web3, networkId },\r\n  { loanOrderHash }\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const data = await bZxContract.methods.getSingleOrder(loanOrderHash).call();\r\n\r\n  const cleanedData = OrderUtils.cleanData(data);\r\n  if (cleanedData.length > 0) return cleanedData[0];\r\n  return {};\r\n};\r\n\r\nexport const getOrdersFillable = async (\r\n  { web3, networkId },\r\n  { start, count, oracleFilter }\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const data = await bZxContract.methods.getOrdersFillable(\r\n\t  web3.utils.toBN(start).toString(10),\r\n\t  web3.utils.toBN(count).toString(10),\r\n\t  web3.utils.isAddress(oracleFilter) ? oracleFilter : NULL_ADDRESS\r\n  ).call();\r\n\r\n  return OrderUtils.cleanData(data);\r\n};\r\n\r\nexport const getOrdersForUser = async (\r\n  { web3, networkId },\r\n  { loanPartyAddress, start, count, oracleFilter }\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const data = await bZxContract.methods\r\n    .getOrdersForUser(\r\n        loanPartyAddress,\r\n        web3.utils.toBN(start).toString(10),\r\n        web3.utils.toBN(count).toString(10),\r\n        web3.utils.isAddress(oracleFilter) ? oracleFilter : NULL_ADDRESS\r\n    ).call();\r\n\r\n  return OrderUtils.cleanData(data);\r\n};\r\n\r\nexport * from \"./loans\";\r\n","import * as CoreUtils from \"../core/utils\";\r\nimport { getContracts } from \"../contracts\";\r\nimport * as Addresses from \"../addresses\";\r\nimport * as LoanPosUtils from \"./utils/loanPositions\";\r\n\r\nexport const getSingleLoan = async (\r\n  { web3, networkId },\r\n  { loanOrderHash, trader }\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const data = await bZxContract.methods\r\n    .getSingleLoan(loanOrderHash, trader)\r\n    .call();\r\n\r\n  const cleanedData = LoanPosUtils.cleanData(data);\r\n  if (cleanedData.length > 0) return cleanedData[0];\r\n  return {};\r\n};\r\n\r\nexport const getLoansForLender = async (\r\n  { web3, networkId },\r\n  { address, count, activeOnly }\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const data = await bZxContract.methods\r\n    .getLoansForLender(address, count, activeOnly)\r\n    .call();\r\n\r\n  return LoanPosUtils.cleanData(data);\r\n};\r\n\r\nexport const getLoansForTrader = async (\r\n  { web3, networkId },\r\n  { address, count, activeOnly }\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    Addresses.getAddresses(networkId).BZx\r\n  );\r\n\r\n  const data = await bZxContract.methods\r\n    .getLoansForTrader(address, count, activeOnly)\r\n    .call();\r\n\r\n  return LoanPosUtils.cleanData(data);\r\n};\r\n","import { pipe, map } from \"ramda\";\r\nimport * as Utils from \"./index\";\r\n\r\nconst NUM_LOAN_POS_FIELDS = 15;\r\n\r\nconst getLoanPosition = params => ({\r\n  ...map(pipe(Utils.substr24, Utils.prepend0x), {\r\n    lender: params[0],\r\n    trader: params[1],\r\n    collateralTokenAddressFilled: params[2],\r\n    positionTokenAddressFilled: params[3],\r\n    loanTokenAddress: params[11],\r\n    interestTokenAddress: params[12]\r\n  }),\r\n  ...map(pipe(Utils.prepend0x, Utils.parseIntHex), {\r\n    loanTokenAmountFilled: params[4],\r\n    collateralTokenAmountFilled: params[5],\r\n    positionTokenAmountFilled: params[6],\r\n    loanStartUnixTimestampSec: params[7],\r\n    loanEndUnixTimestampSec: params[8],\r\n    active: params[9],\r\n    interestPaidTotal: params[13],\r\n    interestDepositRemaining: params[14]\r\n  }),\r\n  ...map(pipe(Utils.prepend0x), {\r\n    loanOrderHash: params[10]\r\n  })\r\n});\r\n\r\nconst checkProperObjCount = Utils.makeCheckProperObjCount(NUM_LOAN_POS_FIELDS);\r\nconst getOrderObjArray = Utils.makeGetOrderObjArray(NUM_LOAN_POS_FIELDS);\r\n\r\nexport const cleanData = raw => \r\n  raw && raw !== \"0x\"\r\n    ? pipe(\r\n        Utils.remove0xPrefix,\r\n        checkProperObjCount,\r\n        getOrderObjArray,\r\n        map(\r\n          pipe(\r\n            Utils.getOrderParams,\r\n            getLoanPosition\r\n          )\r\n        )\r\n      )(raw)\r\n    : [];\r\n","import { pipe, map } from \"ramda\";\r\nimport * as Utils from \"./index\";\r\n\r\nconst NUM_ORDER_FIELDS = 23;\r\n\r\nconst getOrder = params => ({\r\n  ...map(\r\n    pipe(\r\n      Utils.substr24,\r\n      Utils.prepend0x\r\n    ),\r\n    {\r\n      makerAddress: params[0],\r\n      takerAddress: params[20],\r\n      loanTokenAddress: params[1],\r\n      interestTokenAddress: params[2],\r\n      collateralTokenAddress: params[3],\r\n      feeRecipientAddress: params[4],\r\n      oracleAddress: params[5],\r\n      lender: params[15],\r\n      tradeTokenToFillAddress: params[21]\r\n    }\r\n  ),\r\n  ...map(\r\n    pipe(\r\n      Utils.prepend0x,\r\n      Utils.parseIntHex\r\n    ),\r\n    {\r\n      loanTokenAmount: params[6],\r\n      interestAmount: params[7],\r\n      initialMarginAmount: params[8],\r\n      maintenanceMarginAmount: params[9],\r\n      lenderRelayFee: params[10],\r\n      traderRelayFee: params[11],\r\n      maxDurationUnixTimestampSec: params[12],\r\n      expirationUnixTimestampSec: params[13],\r\n      orderFilledAmount: params[16],\r\n      orderCancelledAmount: params[17],\r\n      orderTraderCount: params[18],\r\n      addedUnixTimestampSec: params[19],\r\n      withdrawOnOpen: params[22]\r\n    }\r\n  ),\r\n  loanOrderHash: Utils.prepend0x(params[14])\r\n});\r\n\r\nconst checkProperObjCount = Utils.makeCheckProperObjCount(NUM_ORDER_FIELDS);\r\nconst getOrderObjArray = Utils.makeGetOrderObjArray(NUM_ORDER_FIELDS);\r\n\r\nexport const cleanData = raw =>\r\n  raw && raw !== \"0x\"\r\n    ? pipe(\r\n        Utils.remove0xPrefix,\r\n        checkProperObjCount,\r\n        getOrderObjArray,\r\n        map(\r\n          pipe(\r\n            Utils.getOrderParams,\r\n            getOrder\r\n          )\r\n        )\r\n      )(raw)\r\n    : [];\r\n","export const ContractDoesNotExist = \"Contract does not exist at address.\";\r\nexport const NoNetworkId = \"Missing networkId. Provide a networkId param.\";\r\nexport const InvalidSignature = \"Signature is invalid.\";\r\n","import { pipe, repeat } from \"ramda\";\r\nimport Web3Utils from \"web3-utils\";\r\nimport BN from \"bn.js\";\r\nimport ethABI from \"ethereumjs-abi\";\r\nimport ethUtil from \"ethereumjs-util\";\r\nimport OrderUtils from \"@0x/order-utils\";\r\n\r\nimport * as CoreUtils from \"../core/utils\";\r\nimport { getContracts } from \"../contracts\";\r\nimport * as ZeroExTradeUtils from \"./utils/zeroEx\";\r\nimport * as Signature from \"../signature\";\r\n\r\nconst makeBN = arg => new BN(arg);\r\nconst padLeft = arg => Web3Utils.padLeft(arg, 64);\r\nconst prepend0x = arg => `0x${arg}`;\r\n\r\nexport const tradePositionWith0x = (\r\n  { web3, networkId },\r\n  { order0x, orderHashBZx, getObject, txOpts }\r\n) => {\r\n  const rpcSig0x = ethUtil.toRpcSig(\r\n    order0x.signedOrder.ecSignature.v,\r\n    order0x.signedOrder.ecSignature.r,\r\n    order0x.signedOrder.ecSignature.s\r\n  );\r\n\r\n  const transformedOrder0x = ZeroExTradeUtils.transform0xOrder(order0x);\r\n  const orderHash0x = OrderUtils.getOrderHashHex(transformedOrder0x);\r\n\r\n  Signature.isValidSignature({\r\n    account: order0x.signedOrder.maker,\r\n    orderHash: orderHash0x,\r\n    signature: rpcSig0x\r\n  });\r\n\r\n  const contracts = getContracts(networkId);\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    contracts.BZx.abi,\r\n    contracts.BZx.addresses[networkId]\r\n  );\r\n\r\n  const values = [\r\n    ...[\r\n      transformedOrder0x.maker,\r\n      transformedOrder0x.taker,\r\n      transformedOrder0x.makerTokenAddress,\r\n      transformedOrder0x.takerTokenAddress,\r\n      transformedOrder0x.feeRecipient\r\n    ].map(padLeft),\r\n    ...[\r\n      transformedOrder0x.makerTokenAmount,\r\n      transformedOrder0x.takerTokenAmount,\r\n      transformedOrder0x.makerFee,\r\n      transformedOrder0x.takerFee,\r\n      transformedOrder0x.expirationUnixTimestampSec,\r\n      transformedOrder0x.salt\r\n    ].map(value =>\r\n      pipe(\r\n        makeBN,\r\n        padLeft,\r\n        prepend0x\r\n      )(value)\r\n    )\r\n  ];\r\n\r\n  const types = repeat(\"bytes32\", values.length);\r\n  const hashBuff = ethABI.solidityPack(types, values);\r\n  const order0xTightlyPacked = ethUtil.bufferToHex(hashBuff);\r\n\r\n  const txObj = bZxContract.methods.tradePositionWith0x(\r\n    orderHashBZx,\r\n    order0xTightlyPacked,\r\n    rpcSig0x\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const tradePositionWith0xV2 = (\r\n  { web3, networkId },\r\n  { order0x, orderHashBZx, getObject, txOpts }\r\n) => {\r\n  const contracts = getContracts(networkId);\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    contracts.BZx.abi,\r\n    contracts.BZx.addresses[networkId]\r\n  );\r\n\r\n  const preppedOrders = [];\r\n  const sigs = [];\r\n\r\n  if (Array.isArray(order0x)) {\r\n    for(let i=0; i < order0x.length; i+=1) {\r\n      preppedOrders.push([\r\n        order0x[i].signedOrder.makerAddress,\r\n        order0x[i].signedOrder.takerAddress,\r\n        order0x[i].signedOrder.feeRecipientAddress,\r\n        order0x[i].signedOrder.senderAddress,\r\n        order0x[i].signedOrder.makerAssetAmount,\r\n        order0x[i].signedOrder.takerAssetAmount,\r\n        order0x[i].signedOrder.makerFee,\r\n        order0x[i].signedOrder.takerFee,\r\n        order0x[i].signedOrder.expirationTimeSeconds,\r\n        order0x[i].signedOrder.salt,\r\n        order0x[i].signedOrder.makerAssetData,\r\n        order0x[i].signedOrder.takerAssetData\r\n      ]);\r\n      sigs.push(order0x[i].signedOrder.signature);\r\n    }\r\n  } else {\r\n    preppedOrders.push([\r\n      order0x.signedOrder.makerAddress,\r\n      order0x.signedOrder.takerAddress,\r\n      order0x.signedOrder.feeRecipientAddress,\r\n      order0x.signedOrder.senderAddress,\r\n      order0x.signedOrder.makerAssetAmount,\r\n      order0x.signedOrder.takerAssetAmount,\r\n      order0x.signedOrder.makerFee,\r\n      order0x.signedOrder.takerFee,\r\n      order0x.signedOrder.expirationTimeSeconds,\r\n      order0x.signedOrder.salt,\r\n      order0x.signedOrder.makerAssetData,\r\n      order0x.signedOrder.takerAssetData\r\n    ]);\r\n    sigs.push(order0x.signedOrder.signature);\r\n  }\r\n\r\n  const txObj = bZxContract.methods.tradePositionWith0xV2(\r\n    orderHashBZx,\r\n    preppedOrders,\r\n    sigs\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const tradePositionWithOracle = (\r\n  { web3, networkId },\r\n  { orderHash, tradeTokenAddress, getObject, txOpts = {} } = {}\r\n) => {\r\n  const contracts = getContracts(networkId);\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    contracts.BZx.abi,\r\n    contracts.BZx.addresses[networkId]\r\n  );\r\n\r\n  const txObj = bZxContract.methods.tradePositionWithOracle(\r\n    orderHash,\r\n    tradeTokenAddress\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n","module.exports = require(\"ethereumjs-abi\");","module.exports = require(\"@0x/order-utils\");","import * as constants from \"../../core/constants\";\r\n\r\nexport const transform0xOrder = ({ signedOrder }) => ({\r\n  exchangeContractAddress: signedOrder.exchangeContractAddress,\r\n  expirationUnixTimestampSec: signedOrder.expirationUnixTimestampSec,\r\n  feeRecipient: signedOrder.feeRecipient,\r\n  maker: signedOrder.maker,\r\n  makerFee: signedOrder.makerFee,\r\n  makerTokenAddress: signedOrder.makerTokenAddress,\r\n  makerTokenAmount: signedOrder.makerTokenAmount,\r\n  salt: signedOrder.salt,\r\n  taker: signedOrder.taker || constants.NULL_ADDRESS,\r\n  takerFee: signedOrder.takerFee,\r\n  takerTokenAddress: signedOrder.takerTokenAddress,\r\n  takerTokenAmount: signedOrder.takerTokenAmount\r\n});\r\n","import * as CoreUtils from \"../core/utils\";\r\nimport { getContracts } from \"../contracts\";\r\n\r\nexport const depositCollateral = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, depositTokenAddress, depositAmount, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.depositCollateral(\r\n    loanOrderHash,\r\n    depositTokenAddress,\r\n    web3.utils.toBN(depositAmount).toString(10)\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const withdrawCollateral = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, withdrawAmount, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.withdrawCollateral(\r\n    loanOrderHash,\r\n    web3.utils.toBN(withdrawAmount).toString(10)\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const changeCollateral = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, collateralTokenFilled, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.changeCollateral(\r\n    loanOrderHash,\r\n    collateralTokenFilled\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const withdrawPosition = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, withdrawAmount, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.withdrawPosition(\r\n    loanOrderHash,\r\n    web3.utils.toBN(withdrawAmount).toString(10)\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const depositPosition = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, depositTokenAddress, depositAmount, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.depositPosition(\r\n    loanOrderHash,\r\n    depositTokenAddress,\r\n    web3.utils.toBN(depositAmount).toString(10)\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const getPositionOffset = async (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, trader }\r\n) => {\r\n  const bZxContract = await CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const data = await bZxContract.methods\r\n    .getPositionOffset(loanOrderHash, trader)\r\n    .call();\r\n\r\n  return {\r\n    isPositive: data.isPositive,\r\n    positionOffsetAmount: data.positionOffsetAmount,\r\n    loanOffsetAmount: data.loanOffsetAmount,\r\n   \tcollateralOffsetAmount: data.collateralOffsetAmount\r\n  };\r\n};\r\n\r\nexport const payInterestForOracle = (\r\n  { web3, networkId, addresses },\r\n  { oracleAddress, interestTokenAddress, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.payInterestForOracle(oracleAddress, interestTokenAddress);\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const getLenderInterestForOracle = async (\r\n  { web3, networkId, addresses },\r\n  { lender, oracleAddress, interestTokenAddress }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n  const data = await bZxContract.methods\r\n    .getLenderInterestForOracle(lender, oracleAddress, interestTokenAddress)\r\n    .call();\r\n  return {\r\n    interestPaid: data[0],\r\n    interestPaidDate: data[1],\r\n    interestOwedPerDay: data[2],\r\n    interestUnPaid: data[3]\r\n  };\r\n};\r\n\r\nexport const getLenderInterestForOrder = async (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n  const data = await bZxContract.methods\r\n    .getLenderInterestForOrder(loanOrderHash)\r\n    .call();\r\n  return {\r\n    lender: data[0],\r\n    interestTokenAddress: data[1],\r\n    interestPaid: data[2],\r\n    interestPaidDate: data[3],\r\n    interestOwedPerDay: data[4],\r\n    interestUnPaid: data[5]\r\n  };\r\n};\r\n\r\nexport const getTraderInterestForLoan = async (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, trader }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n  const data = await bZxContract.methods\r\n    .getTraderInterestForLoan(loanOrderHash, trader)\r\n    .call();\r\n  return {\r\n    interestTokenAddress: data[0],\r\n    interestOwedPerDay: data[1],\r\n    interestPaidTotal: data[2],\r\n    interestDepositTotal: data[3],\r\n    interestDepositRemaining: data[4]\r\n  };\r\n};\r\n\r\nexport const closeLoanPartially = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, closeAmount, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.closeLoanPartially(\r\n    loanOrderHash,\r\n    web3.utils.toBN(closeAmount).toString(10)\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n\r\nexport const closeLoan = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.closeLoan(loanOrderHash);\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};","import * as CoreUtils from \"../core/utils\";\r\nimport { getContracts } from \"../contracts\";\r\nimport * as ActiveLoansUtils from \"./utils/activeLoans\";\r\n\r\nexport const getActiveLoans = async (\r\n  { web3, networkId, addresses },\r\n  { start, count }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n  const data = await bZxContract.methods.getActiveLoans(web3.utils.toBN(start).toString(10), web3.utils.toBN(count).toString(10)).call();\r\n  return ActiveLoansUtils.cleanData(data);\r\n};\r\n\r\nexport const getMarginLevels = async (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, trader }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n  const data = await bZxContract.methods\r\n    .getMarginLevels(loanOrderHash, trader)\r\n    .call();\r\n  return {\r\n    initialMarginAmount: data[0],\r\n    maintenanceMarginAmount: data[1],\r\n    currentMarginAmount: data[2]\r\n  };\r\n};\r\n\r\nexport const liquidateLoan = (\r\n  { web3, networkId, addresses },\r\n  { loanOrderHash, trader, liquidateAmount, getObject, txOpts }\r\n) => {\r\n  const bZxContract = CoreUtils.getContractInstance(\r\n    web3,\r\n    getContracts(networkId).BZx.abi,\r\n    addresses.BZx\r\n  );\r\n\r\n  const txObj = bZxContract.methods.liquidatePosition(\r\n    loanOrderHash,\r\n    trader,\r\n    liquidateAmount ? liquidateAmount : \"0\"\r\n  );\r\n\r\n  if (getObject) {\r\n    return txObj;\r\n  }\r\n  return txObj.send(txOpts);\r\n};\r\n","import { pipe, map } from \"ramda\";\r\nimport * as OrderHistoryUtils from \"../../orderHistory/utils/index\";\r\n\r\nconst NUM_LOAN_FIELDS = 3;\r\n\r\nconst getLoan = params => ({\r\n  loanOrderHash: OrderHistoryUtils.prepend0x(params[0]),\r\n  trader: pipe(\r\n    OrderHistoryUtils.substr24,\r\n    OrderHistoryUtils.prepend0x\r\n  )(params[1]),\r\n  loanEndUnixTimestampSec: OrderHistoryUtils.parseIntHex(params[2])\r\n});\r\n\r\nconst checkProperObjCount = OrderHistoryUtils.makeCheckProperObjCount(\r\n  NUM_LOAN_FIELDS\r\n);\r\nconst getOrderObjArray = OrderHistoryUtils.makeGetOrderObjArray(\r\n  NUM_LOAN_FIELDS\r\n);\r\n\r\nexport const cleanData = raw =>\r\n  raw && raw !== \"0x\"\r\n    ? pipe(\r\n        OrderHistoryUtils.remove0xPrefix,\r\n        checkProperObjCount,\r\n        getOrderObjArray,\r\n        map(\r\n          pipe(\r\n            OrderHistoryUtils.getOrderParams,\r\n            getLoan\r\n          )\r\n        )\r\n      )(raw)\r\n    : [];\r\n"],"sourceRoot":""}